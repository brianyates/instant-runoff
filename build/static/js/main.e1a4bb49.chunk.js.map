{"version":3,"sources":["images/logo.svg","images/thumbs_up.svg","components/Navbar.js","components/Landing.js","components/FormInput.js","components/Icon.js","components/LoadingIcon.js","components/PollConfirmationModal.js","components/PollCreatedModal.js","utils/index.js","components/PollNew.js","components/CustomDraggable.js","components/PollSelectionModal.js","components/SuccessModal.js","components/PollSelections.js","components/PollSelectionParent.js","components/PollResults.js","components/App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Navbar","react_default","a","createElement","title","href","className","alt","src","logo","Component","Landing","react","components_Navbar","style","maxWidth","margin","padding","thumbsUp","width","FormInput","state","focused","handleFocus","_this","setState","touched","handleBlur","hasError","props","submitted","error","_this2","this","_this$props","type","name","label","value","index","concat","autoComplete","onFocus","onBlur","onChange","event","handleChange","target","onClick","removeInput","vectors","plus","path","viewBox","Icon","_ref","color","icon","aria-hidden","role","xmlns","fill","d","LoadingIcon","classOption","PollConfirmationModal","submitting","handleSubmit","axios","post","values","then","data","status","handleSuccess","catch","err","console","log","renderEmails","emails","split","map","email","i","key","trim","renderOptions","options","filter","length","option","modalStatus","handleModalClose","fontSize","marginBottom","textAlign","borderTop","borderBottom","paddingLeft","components_LoadingIcon","PollCreatedModal","pollID","inputValidation","input","nameValidation","test","emailValidation","re","invalidEmails","ordinals","PollNew","inputCount","createdBy","errors","arguments","undefined","Object","assign","validateInputs","callback","submitAction","preventDefault","addInput","submitBtn","scrollIntoView","behavior","len","isDisabled","renderInputs","inputArr","push","components_FormInput","document","components_PollConfirmationModal","components_PollCreatedModal","onSubmit","paddingBottom","ref","el","marginTop","disabled","components_Icon","CLOSE_ENOUGH","CustomDraggable","initialPosition","element","handleResize","scrollLeft","documentElement","scrollTop","_this$state$element$g","getBoundingClientRect","x","y","resizeReset","selection","dims","placeholders","x2","y2","init","setPosition","position","handleRef","_element$getBoundingC","handleStop","e","ui","closeEnough","_ui$node$getBoundingC","node","ph","Math","sqrt","window","addEventListener","removeEventListener","react_draggable_default","onStop","PollSelectionModal","voterID","selections","res","renderSelections","letterSpacing","textDecoration","SuccessModal","PollSelections","draggables","success","newSelection","toConsumableArray","components_CustomDraggable","renderPlaceholders","opt","resetDraggables","canSubmit","alert","components_PollSelectionModal","components_SuccessModal","PollSelectionParent","poll","match","params","get","voted","components_PollSelections","renderContent","PollResults","voters","v","allVotesReceived","sel","cursor","pendingVoters","pv","winner","_this$state$poll","resultArray","winCutoff","overflowX","fontWeight","colSpan","val","cell","renderWinner","renderResultsTable","votesReceived","totalVoters","toFixed","renderVoters","renderPendingVoters","App","BrowserRouter","Switch","Route","exact","component","Boolean","location","hostname","ReactDOM","render","components_App","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.e1a4bb49.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5f854386.svg\";","module.exports = __webpack_public_path__ + \"static/media/thumbs_up.914ed44c.svg\";","import React, {Component} from 'react';\nimport logo from '../images/logo.svg';\n\nclass Navbar extends Component{\n    render() {\n        return(\n            <nav>\n                <a title='InstantRCV' href='/' className='float-left logo nav-items'>\n                    <span><img alt='Logo' src={logo} /></span>\n                    <span className='orange-1'>Instant</span><span className='orange-2'>RCV</span>\n                </a>\n                <div className='float-right nav-items'>\n                    <a href='/new-poll' className='btn nav-btn'>\n                        <span></span>\n                        <span>Create a Poll</span>\n                    </a>\n                </div>\n            </nav>\n        )\n    }\n}\n\nexport default Navbar;\n\n","import React, {Fragment} from 'react';\nimport Navbar from './Navbar';\nimport thumbsUp from '../images/thumbs_up.svg';\n\nconst Landing = () => {\n    return(\n        <Fragment>\n            <Navbar />\n            <div className='main-container mc-2 landing-page-container row'>\n                <div className='col-2 landing-section-1'>\n                    <div style={{maxWidth: 500, margin: 'auto', padding: 20}}>\n                    <img alt='Thumbs up' src={thumbsUp} width='80%' className='thumb-img' />\n                    </div>\n                </div>\n                <div className='col-2 landing-section-2'>\n                    <div style={{maxWidth: 500}}>\n                        <div className='landing-big-text'>Create Your Own RCV Poll</div>\n                        <div className='landing-small-text'> Use our free tool to create your own Ranked Choice \n                        Voting (RCV) polls. Simply build your poll, and we'll share it with your voters through email!</div>\n                    </div>\n                </div>\n            </div>\n        </Fragment>\n    )\n}\n\nexport default Landing;","import React, {Component} from 'react';\n\nclass FormInput extends Component{\n    state={\n        focused: false\n    }\n    handleFocus = () => {\n        this.setState({focused: true, touched: true});\n    }\n    handleBlur = () => {\n        this.setState({focused: false})\n    }\n    hasError = () => {\n        return (this.props.submitted && this.props.error)\n    }\n    render(){\n        const {type, name, label, value, index, error} = this.props;\n        return(\n            <div className={`input-container${this.state.focused ? ' focused' : ''}${this.hasError() ? ' has-error' : ''}`}>\n                <div className='input-label-container'>\n                <div className={`label${this.state.focused || this.props.value ? ' focused' : ''}`}>{label}</div>\n                    <input \n                        autoComplete={name===\"emails\" || name===\"createdBy\" ? name : \"off\"}\n                        className='form-input' \n                        type={type} \n                        name={name} \n                        onFocus={() => this.handleFocus()} \n                        onBlur={() => this.handleBlur()}\n                        value={value}\n                        onChange={event => this.props.handleChange(event.target.value, name, index)}\n                    />\n                </div>\n                <div className='border-container'>\n                    <div className='border-filler'></div>\n                </div>\n                <div className='error-msg'>{(this.hasError()) && error}</div>\n                {index > 3 && <button \n                                className='remove-item' \n                                title='Remove this voting option' \n                                onClick={() => this.props.removeInput(index)}>\n                                <span>&times;</span>\n                                </button>}\n            </div>\n        )\n    }\n}\n\nexport default FormInput;","import React from 'react';\n\nconst vectors = {\n    plus: {path: 'M416 208H272V64c0-17.67-14.33-32-32-32h-32c-17.67 0-32 14.33-32 32v144H32c-17.67 0-32 14.33-32 32v32c0 17.67 14.33 32 32 32h144v144c0 17.67 14.33 32 32 32h32c17.67 0 32-14.33 32-32V304h144c17.67 0 32-14.33 32-32v-32c0-17.67-14.33-32-32-32z',\n        viewBox: '0 0 448 512'}\n};\n\nconst Icon = ({color, icon, width}) =>{\n    return(\n        <svg aria-hidden=\"true\" role=\"img\" xmlns=\"http://www.w3.org/2000/svg\" viewBox={vectors[icon].viewBox} style={{width}}><path fill={color} d={vectors[icon].path}></path></svg>\n    )\n}\n\nexport default Icon;","import React,{Fragment} from 'react';\n\nconst LoadingIcon = ({classOption}) => {\n    return(\n        <Fragment>\n            <div className={`${classOption || 'loading-container'}`} alt=\"Loading...\">\n                <div></div>\n                <div></div>\n                <div></div>\n                <div></div>\n            </div>\n            {classOption && <div className='p-10'>Loading...</div>}\n        </Fragment>\n    )\n}\nexport default LoadingIcon;","import React, {Component} from 'react';\nimport LoadingIcon from './LoadingIcon';\nimport axios from 'axios';\n\nclass PollConfirmationModal extends Component {\n    state = {\n        submitting: false,\n        error: false\n    }\n    handleSubmit = () => {\n        this.setState({submitting: true});\n        axios.post('/api/create-poll', this.props.values)\n        .then( ({data, status}) => {\n            if(status===201){\n                this.props.handleSuccess(data)\n            }\n            else{\n                this.setState({error: true, submitting: false});\n            }\n        })\n        .catch( err => {\n            console.log(err);\n            this.setState({error: true, submitting: false});\n        })\n    }\n    renderEmails = () => {\n        return this.props.values.emails.split(',').map( (email, i) => {\n            return <li key={`${email + i}`}>{email.trim()}</li>\n        })\n    }\n    renderOptions = () => {\n        return this.props.values.options.filter(i => i.length > 0).map( (option, i) => {\n            return (<li key={`option-${i}`}>{option}</li>)\n        })\n    }\n    render(){\n        const {modalStatus, values, handleModalClose} = this.props;\n        return(\n            <div className={`modal-backdrop ${modalStatus}`}>\n                <div className='modal-container p-10'>\n                    <div style={{fontSize: 32, marginBottom: 10}} className='text-center'>Confirmation</div>\n                    <p style={{marginBottom: 20, fontSize: 16, textAlign: 'center'}}>Please confirm your poll entries are correct before submitting</p>\n                    <div className='confirmation-values p-10' style={{borderTop: '1px solid #ddd', borderBottom: '1px solid #ddd'}}>\n                        <div><strong>Poll Title: </strong>{values.title}</div>\n                        <div>\n                            <strong>Voting Options:</strong>\n                            <div>\n                                <ul style={{paddingLeft: 30}}>\n                                    {this.renderOptions()}\n                                </ul>\n                            </div>\n                        </div>\n                        <div>\n                            <strong>Email Recipients:</strong>\n                            <div>\n                                <ul style={{paddingLeft: 30}}>\n                                    {this.renderEmails()}\n                                </ul>\n                            </div>\n                        </div>\n                    </div>\n                    {this.state.submitting ? <div className='text-right p-5'><LoadingIcon /></div> : (<div className='text-right'>\n                        <button onClick={() => handleModalClose()} className='btn btn-white m-10'>Cancel</button>\n                        <button onClick={() => this.handleSubmit()} className='btn btn-orange btn-orange-2 m-10'>Looks good, fire away!</button>\n                    </div>)}\n                    {this.state.error && <div style={{color: '#d24425'}} className='text-right p-10'>An error occurred. Please try again later.</div>}\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default PollConfirmationModal;","import React from 'react';\n\nconst PollCreatedModal = ({pollID}) => {\n    return(\n        <div>\n            <div className={`text-center modal-backdrop open`}>\n                <div className='modal-container p-10'>\n                    <div style={{color: '#2c74c1', fontSize: 49, marginBottom: 15}}>Success!</div>\n                    <div style={{borderBottom: '1px solid #ddd', borderTop: '1px solid #ddd', padding: '20px 10px', margin: '20px auto'}}>\n                        <div style={{margin: 'auto', maxWidth: 450}}>\n                            You have successfully created a new poll. \n                            You should receive an email with a link to vote, assuming you added yourself as a voter. \n                            What would you like to do next?\n                        </div>\n                    </div>\n                    <div className='text-right'>\n                        <a href='/' className='btn btn-white m-10'>Go Home</a>\n                        <a href={`/poll/${pollID}/results`} className='btn btn-orange btn-orange-2 m-10'>View Results</a>\n                    </div>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default PollCreatedModal;","export const inputValidation = input => {\n    if(!input){\n        return 'This is a required field';\n    }\n    else if (input.length > 80){\n        return \"This field can't exceed 80 characters\"\n    }\n    return null;\n}\n\nexport const nameValidation = input => {\n    if(!input){\n        return 'This is a required field';\n    }\n    else if (/^[a-z ,.'-]+$/i.test(input) === false){\n        return \"Please enter your full name\"\n    }\n    return null;\n}\n\nexport const emailValidation = emails =>{\n    if (!emails){\n        return 'This is a required field';\n    }\n    const re = /^[a-zA-Z0-9.!#$%&’*+/=?^_`{|}~-]+@[a-zA-Z0-9-]+(?:\\.[a-zA-Z0-9-]+)*$/;\n    const invalidEmails = emails.split(',')\n    .map(email => email.trim())\n    .filter(email => re.test(email) === false);\n    if (invalidEmails.length > 0){\n        return `The following emails are invalid: ${invalidEmails}`\n    }\n    if (emails.split(',').length > 200){\n        return 'No more than 200 email recipients are allowed'\n    }\n    return null;\n}\n\nexport const ordinals = ['1st', '2nd', '3rd', '4th', '5th', '6th', '7th', '8th', '9th', '10th'];","import React, {Component, Fragment} from 'react';\nimport FormInput from './FormInput';\nimport Navbar from './Navbar';\nimport Icon from './Icon';\nimport PollConfirmationModal from './PollConfirmationModal';\nimport PollCreatedModal from './PollCreatedModal';\nimport {inputValidation, emailValidation, nameValidation} from '../utils';\n\nclass PollNew extends Component {\n    state = {\n        inputCount: 3,\n        values: {\n            emails: '',\n            title: '',\n            createdBy: '',\n            options: ['', '', '', '', '', '', '', '', '', '']\n        },\n        errors: {\n            emails: '',\n            title: '',\n            createdBy: '',\n            options: ['', '', '', '', '', '', '', '', '', '']\n        },\n        hasError: false,\n        submitted: false,\n        pollID: null,\n        modalStatus: 'closed'\n    }\n    componentWillMount(){\n        document.title = 'Create a New Poll | InstantRCV';\n    }\n    handleChange = (value, name, index = null) => {\n        let values = Object.assign({}, this.state.values);\n        if(index){\n            values.options[index-1] = value;\n        }\n        else{\n            values[name] = value;\n        }\n        this.setState({values}, this.validateInputs);\n    }\n    validateInputs = (callback) => {\n        let hasError = false;\n        let errors = Object.assign({}, this.state.errors);\n        errors.emails = emailValidation(this.state.values.emails);\n        errors.title = inputValidation(this.state.values.title);\n        errors.createdBy = nameValidation(this.state.values.createdBy);\n        if(errors.emails || errors.title) {hasError = true}\n        for (let i = 0; i < this.state.inputCount; i++){\n            errors.options[i] = inputValidation(this.state.values.options[i]);\n            if(errors.options[i]){hasError = true}\n        }\n        this.setState({errors, hasError}, callback);\n    }\n    submitAction = () => {\n        if(!this.state.hasError){\n            this.setState({modalStatus: 'open'})\n        }\n    }\n    handleSubmit = event => {\n        event.preventDefault();\n        this.setState({submitted: true}, this.validateInputs(this.submitAction));\n    }\n    handleSuccess = pollID => {\n        this.setState({pollID, modalStatus: 'closed'})\n    }\n    addInput = () => {\n        this.setState({inputCount: this.state.inputCount+1});\n        this.submitBtn.scrollIntoView({ behavior: \"smooth\" });\n    }\n    removeInput = index => {\n        let values = Object.assign({}, this.state.values);\n        values.options[index-1] = '';\n        let len = values.options.length;\n        for(let i = index - 1; i < len - 1; i++){\n            values.options[i] = values.options[i+1]\n        }\n        values.options[len] = '';\n        this.setState({values, inputCount: this.state.inputCount - 1});\n    }\n    isDisabled = () => {\n        return this.state.inputCount >= this.state.values.options.length\n    }\n    renderInputs = () => {\n        let inputArr=[];\n        for(let i = 0; i < this.state.inputCount; i++){\n            inputArr.push(<FormInput \n                            key={`option${i}`}\n                            type='text' \n                            name={`option$${i}`} \n                            label={`Enter voting option #${i+1}`}\n                            index={i+1}\n                            value={this.state.values.options[i]}\n                            error={this.state.errors.options[i]}\n                            submitted={this.state.submitted}\n                            handleChange={this.handleChange}\n                            removeInput={this.removeInput}\n                            />)\n        }\n        return inputArr;\n    }\n    render(){\n        return(\n            <Fragment>\n                {this.state.modalStatus === 'open' && <PollConfirmationModal \n                                                        modalStatus={'open'} \n                                                        values={this.state.values} \n                                                        handleModalClose={() => this.setState({modalStatus: 'closed'})}\n                                                        handleSuccess={this.handleSuccess}\n                                                        />}\n                {this.state.pollID && <PollCreatedModal pollID={this.state.pollID} />}\n                <Navbar />\n                <div className='main-container'>\n                    <h1 className='text-center'>Create a New RCV Poll</h1>\n                    <div className='p-10 text-center' style={{margin: 'auto', maxWidth: 600}}>*Limit 10 voting options per poll. Please separate each vote recipient's email address with a comma.</div>\n                    <div className='form-container'>\n                        <form onSubmit={this.handleSubmit}>\n                            <input type=\"hidden\" value=\"something\" />\n                            <FormInput \n                                type='text' \n                                name='createdBy' \n                                label='Enter your full name' \n                                value={this.state.values.createdBy} \n                                error={this.state.errors.createdBy}\n                                submitted={this.state.submitted}\n                                handleChange={this.handleChange} \n                            />\n                            <FormInput \n                                type='text' \n                                name='emails' \n                                label='Enter voter emails' \n                                value={this.state.values.emails} \n                                error={this.state.errors.emails}\n                                submitted={this.state.submitted}\n                                handleChange={this.handleChange} \n                            />\n                            <FormInput \n                                type='text' \n                                name='title' \n                                label='Enter a poll title' \n                                value={this.state.values.title}\n                                error={this.state.errors.title}\n                                submitted={this.state.submitted}\n                                handleChange={this.handleChange} \n                            />\n                            {this.renderInputs()}\n                            <div style={{paddingBottom: 20}}>\n                                <button \n                                ref={el => this.submitBtn = el}\n                                className={`float-right btn btn-orange`}\n                                >SUBMIT POLL</button>\n                            </div>\n                        </form>\n                        <button \n                            style={{marginTop: -20}}\n                            className={`float-left btn btn-white${this.isDisabled() ? ' disabled': ''}`}\n                            disabled={this.isDisabled()}\n                            onClick={() => this.addInput()}><Icon icon='plus' width='10px' color='#333'/> <span>Add Option</span></button>\n                    </div>\n                </div>\n            </Fragment>\n        )\n    }\n}\n\nexport default PollNew;","import React, {Component} from 'react';\nimport Draggable from 'react-draggable';\n\nconst CLOSE_ENOUGH = 80;\n\nclass CustomDraggable extends Component{\n    state = {\n        initialPosition: null,\n        element: null\n    }\n    componentWillMount(){\n        window.addEventListener('resize', this.handleResize);\n    }\n    componentWillUnmount(){\n        window.removeEventListener('resize', this.handleResize);\n    }\n    handleResize = () => {\n        let scrollLeft = document.documentElement.scrollLeft;\n        let scrollTop = document.documentElement.scrollTop;\n        let {x, y} = this.state.element.getBoundingClientRect();\n        this.setState({initialPosition: {x: x + scrollLeft, y: y + scrollTop}}, this.resizeReset());\n    }\n    resizeReset = () => {\n        let selection = this.props.data.selection;\n        if(selection !== null){\n            let dims = this.props.placeholders[selection].getBoundingClientRect();\n            let x2 = dims.x + document.documentElement.scrollLeft;\n            let y2 = dims.y + document.documentElement.scrollTop;\n            let init = this.state.initialPosition;\n            this.props.setPosition({selection, position: {x: x2 - init.x, y: y2 - init.y}}, this.props.index);\n        }\n    }\n    handleRef = element => {\n        if(element && !this.state.element){\n            let scrollLeft = document.documentElement.scrollLeft;\n            let scrollTop = document.documentElement.scrollTop;\n            let {x, y} = element.getBoundingClientRect();\n            this.setState({element, initialPosition: {x: x + scrollLeft, y: y + scrollTop}});\n        }\n    }\n    handleStop = (e, ui) => {\n        let closeEnough = false;\n        let {x, y} = ui.node.getBoundingClientRect();\n        let ph = this.props.placeholders;\n        let scrollLeft = document.documentElement.scrollLeft;\n        let scrollTop = document.documentElement.scrollTop;\n        x += scrollLeft;\n        y += scrollTop;\n        for(let i = 0; i < ph.length; i++){\n            let dims = ph[i].getBoundingClientRect();\n            let x2 = dims.x + scrollLeft;\n            let y2 = dims.y + scrollTop;\n            let distance = Math.sqrt((x2-x)*(x2-x) + (y2-y)*(y2-y));\n            if(distance < CLOSE_ENOUGH){\n                let init = this.state.initialPosition;\n                this.props.setPosition({selection: i, position: {x: x2 - init.x, y: y2 - init.y}}, this.props.index);\n                closeEnough = true;\n                break;\n            }\n        }\n        if(!closeEnough){\n            this.props.setPosition({selection: null, position: {x: 0, y: 0}}, this.props.index);\n        }\n    }\n    render(){\n        const {option, index, data: {position}} = this.props;\n        return(\n            <div ref={el => this.handleRef(el)} className='draggable-placeholder'>\n                <span>Option #{index+1}</span>\n                <Draggable\n                    onStop={this.handleStop}\n                    position={position}\n                >\n                    <div className='draggable-option'>{option}</div>\n                </Draggable>\n            </div>\n        )\n    }\n}\n\nexport default CustomDraggable;","import React, {Component} from 'react';\nimport axios from 'axios';\nimport LoadingIcon from './LoadingIcon';\nimport {ordinals} from '../utils';\n\nclass PollSelectionModal extends Component {\n    state = {\n        submitting: false,\n        error: false\n    }\n    handleSubmit = () => {\n        this.setState({submitting: true})\n        axios.post(`/api/poll/${this.props.pollID}/voter/${this.props.voterID}`, this.props.selections)\n        .then( res =>{\n            if(res.status===202){\n                this.props.handleSuccess();\n            }\n            else{\n                this.setState({error: true, submitting: false});\n            }\n        })\n        .catch( () => {\n            this.setState({error: true, submitting: false});\n        })\n    }\n    renderSelections = () => {\n       return this.props.selections.map( (selection, index) => {\n            return(<tr key={`r-${index}`}>\n                        <td><strong>{ordinals[index]} Choice:</strong></td>\n                        <td>{selection}</td>\n                    </tr>\n                )\n        })\n    }\n    render(){\n        const {modalStatus, title, handleModalClose} = this.props;\n        return(\n            <div className={`text-center modal-backdrop ${modalStatus}`}>\n                <div className='modal-container p-10'>\n                    <div style={{fontSize: 28, marginBottom: 20}}>{title}</div>\n                    <p style={{marginBottom: 20, fontSize: 16}}>Please confirm your poll entries are correct before submitting</p>\n                    <div style={{borderBottom: '1px solid #ddd', borderTop: '1px solid #ddd', padding: '10px 10px 20px 10px', margin: '20px auto'}}>\n                        <div style={{color: '#444', letterSpacing: 3, marginBottom: 20, fontSize: 22, textDecoration: 'underline'}}>YOUR SELECTIONS</div>\n                        <div>\n                            <table className='table'>\n                                <tbody>\n                                    {this.renderSelections()}\n                                </tbody>\n                            </table>\n                        </div>\n                    </div>\n                    {this.state.submitting ? <div className='text-right p-5'><LoadingIcon /></div> : (<div className='text-right'>\n                        <button onClick={() => handleModalClose()} className='btn btn-white m-10'>Cancel</button>\n                        <button onClick={() => this.handleSubmit()} className='btn btn-orange btn-orange-2 m-10'>Looks good, fire away!</button>\n                    </div>)}\n                    {this.state.error && <div style={{color: '#d24425'}} className='text-right p-10'>An error occurred. Please try again later.</div>}\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default PollSelectionModal;","import React from 'react';\n\nconst SuccessModal = ({pollID}) => {\n    return(\n        <div>\n            <div className={`text-center modal-backdrop open`}>\n                <div className='modal-container p-10'>\n                    <div style={{color: '#2c74c1', fontSize: 49, marginBottom: 15}}>Success!</div>\n                    <div style={{borderBottom: '1px solid #ddd', borderTop: '1px solid #ddd', padding: '20px 10px', margin: '20px auto'}}>\n                        <div style={{margin: 'auto', maxWidth: 400}}>\n                            We have successfully received your voting results. Now what would you like to do next?\n                        </div>\n                    </div>\n                    <div className='text-right'>\n                        <a href='/' className='btn btn-white m-10'>Go Home</a>\n                        <a href={`/poll/${pollID}/results`} className='btn btn-orange btn-orange-2 m-10'>View Results</a>\n                    </div>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default SuccessModal;","import React, {Component, Fragment} from 'react';\nimport CustomDraggable from './CustomDraggable';\nimport PollSelectionModal from './PollSelectionModal';\nimport SuccessModal from './SuccessModal';\nimport {ordinals} from '../utils';\n\nclass PollSelections extends Component{\n    state = {\n        draggables: [],\n        selections: [],\n        modalStatus: 'closed',\n        success: false\n    }\n    componentWillMount(){\n        this.placeholders = [];\n        let draggables = [];\n        for(let i = 0; i < this.props.options.length; i++){\n            draggables.push({selection: null, position: {x: 0, y: 0}});\n        }\n        this.setState({draggables})\n    }\n    handleSuccess = () => {\n        this.setState({success: true, modalStatus: 'closed'})\n    }\n    setPosition = (data, index) => {\n        let newSelection = true;\n        let draggables = [...this.state.draggables];\n        for(let i = 0; i < draggables.length; i++){\n            if(draggables[i].selection === data.selection && i !== index){\n                newSelection = false;\n            }\n        }\n        if(newSelection || (!data.selection && draggables[index].selection !== null)){\n            draggables[index] = data;\n            this.setState({draggables});\n        }\n    }\n    renderOptions = () => {\n        return this.props.options.map( (option, index) =>{\n            return (\n                    <CustomDraggable \n                        key={`opt-${index}`}\n                        option={option} \n                        placeholders={this.placeholders} \n                        index={index} \n                        data={this.state.draggables[index]} \n                        setPosition={this.setPosition}\n                    />\n            )\n        })\n    }\n    renderPlaceholders = () => {\n        return this.props.options.map( (opt, index) =>{\n            return (<div ref={el => this.placeholders[index] = el} key={`placeholder-${index}`} className='draggable-selection'>\n                        <span>Drag your {ordinals[index]} choice here</span>\n                    </div>)\n        })\n    }\n    resetDraggables = () => {\n        let len = this.state.draggables.length;\n        let draggables = [];\n        for(let i = 0; i < len; i++){\n            draggables.push({selection: null, position: {x: 0, y: 0}})\n        }\n        this.setState({draggables});\n    }\n    handleSubmit = () =>{\n        let draggables = this.state.draggables;\n        let selections = [...draggables].map( d => null);\n        let canSubmit = true;\n        for (let i = 0; i < draggables.length; i++){\n            if(draggables[i].selection === null){\n                canSubmit = false;\n                break;\n            }\n            else{\n                selections[draggables[i].selection] = this.props.options[i]\n            }\n        }\n        if(canSubmit){\n            this.setState({modalStatus: 'open', selections})\n        }\n        else{\n            window.alert('You must rank all options before submitting.')\n        }\n    }\n    render(){\n        return(\n            <Fragment>\n                <div style={{maxWidth: 900, margin: 'auto', padding: 10}}>\n                    <h1 className='text-center'>{this.props.title}</h1>\n                    <div className='p-10 text-center'>Please rank the provided options in order \n                    from most preferable to least preferable</div>\n                    <div className='border-holder'></div>\n                    <div className='row'>\n                        <div className='col-2-always p-10'>\n                            <div className='text-center font-18'>OPTIONS</div>\n                            {this.renderOptions()}\n                        </div>\n                        <div className='col-2-always p-10'>\n                            <div className='text-center font-18'>SELECTIONS</div>\n                            {this.renderPlaceholders()}\n                        </div>\n                    </div>\n                    <div className='border-holder'></div>\n                    <div className='text-right'>\n                        <button onClick={() => this.resetDraggables()} className='btn btn-black m-10'>RESET</button>\n                        <button onClick={() => this.handleSubmit()} style={{width: 130, fontSize: 22}} className='btn btn-orange m-10 box-shadow'>SUBMIT</button>\n                    </div>\n                </div>\n                <PollSelectionModal \n                handleModalClose={() => this.setState({modalStatus: 'closed'})}\n                handleSuccess={this.handleSuccess}\n                modalStatus={this.state.modalStatus}\n                title={this.props.title}\n                selections={this.state.selections}\n                pollID={this.props.pollID}\n                voterID={this.props.voterID}\n                />\n                {this.state.success && <SuccessModal pollID={this.props.pollID}/>}\n            </Fragment>\n        )\n    }\n}\n\nexport default PollSelections;","import React, {Component, Fragment} from 'react';\nimport axios from 'axios';\nimport Navbar from './Navbar';\nimport LoadingIcon from './LoadingIcon';\nimport PollSelections from './PollSelections';\n\nclass PollSelectionParent extends Component{\n    state = {\n        poll: null,\n        draggables: null,\n        error: false\n    }\n    componentWillMount(){\n        document.title = 'Make Your Poll Selections | InstantRCV';\n        this.pollID = this.props.match.params.pollID;\n        this.voterID = this.props.match.params.voterID;\n        axios.get(`/api/poll/${this.pollID}/voter/${this.voterID}`)\n        .then( res => {\n            if(res.data){\n                this.setState({poll: res.data});\n            }\n            else{\n                this.setState({error: true})\n            }\n        })\n        .catch(() => {\n            this.setState({error: true})\n        })\n    }\n    renderContent(){\n        if(this.state.error){\n            return (\n                <div className='p-10 text-center font-18'>\n                    This poll no longer exists or could not be loaded.\n                </div>\n            )\n        }\n        else if(this.state.poll){\n            if(this.state.poll.voted){\n                return(<div className='p-10 text-center font-18'>\n                            You have already voted in this poll. <a style={{color: '#fff', textDecoration: 'underline'}} href={`/poll/${this.pollID}/results`}>Click here to view the results</a>.\n                        </div>)\n            }\n            return <PollSelections \n                    pollID={this.pollID}\n                    voterID={this.voterID}\n                    options={this.state.poll.options} \n                    title={this.state.poll.title} />\n        }\n        return (\n            <div className='p-10 text-center'>\n                <LoadingIcon classOption='loading-2' />\n            </div>\n        )\n    }\n    render(){\n        return(\n            <Fragment>\n                <Navbar />\n                <div className='main-container'>\n                    {this.renderContent()}\n                </div>\n            </Fragment>\n        )\n    }\n}\n\nexport default PollSelectionParent;","import React, {Component, Fragment} from 'react';\nimport Navbar from './Navbar';\nimport LoadingIcon from './LoadingIcon'\nimport axios from 'axios';\nimport {ordinals} from '../utils';\n\nconst winCutoff = 2;\nconst resultArray = [[\"Option 1\", [1, 1, 2]], [\"Option 1\", [1, undefined, undefined]], [\"Option 1\", [1, undefined, undefined]]];\n\nclass PollResults extends Component{\n    state = {\n        poll: null,\n        error: false\n    }\n    componentWillMount(){\n        document.title = \"View Poll Results | InstantRCV\"\n        this.pollID = this.props.match.params.pollID;\n        axios.get(`/api/results/${this.pollID}`)\n        .then( res => {\n            if(res.status === 200){\n                this.setState({poll: res.data});\n            }\n            else{\n                this.setState({error:true});\n            }\n        })\n        .catch( () => {\n            this.setState({error: true})\n        })\n    }\n    renderVoters(){\n        if(this.state.poll){\n            let voters = this.state.poll.voters.filter( v => v.voted);\n            if(this.state.poll.allVotesReceived){\n                return(\n                    <Fragment>\n                        <div style={{margin: '20px auto', borderTop: '1px solid #fff', textAlign: 'left', fontSize: 24}}>Voter Selections:</div>\n                        <div className='row'>\n                            {voters.map( (v,i) => {\n                                return (<div key={`voter${i}`} className='col-3 p-10'>\n                                            <div className='voter box-shadow'>\n                                                <div className='email font-18'>{v.email}</div>\n                                                <table className='table'>\n                                                    <tbody>\n                                                        {v.selections.map( (sel, i) => {\n                                                            return (<tr key={`row-${i}`}>\n                                                                        <td><strong>{ordinals[i]} Choice:</strong></td>\n                                                                        <td>{sel}</td>\n                                                                    </tr>\n                                                            )\n                                                        })}\n                                                    </tbody>\n                                                </table>\n                                            </div>\n                                        </div>)\n                            })}\n                        </div>\n                    </Fragment>\n                )\n            }\n            if(voters.length > 0){\n                return(\n                    <Fragment>\n                        <div style={{margin: '20px auto', borderTop: '1px solid #fff', textAlign: 'left', fontSize: 24}}>Voter Selections:</div>\n                        <div className='row'>\n                            {voters.map( (v,i) => {\n                                return (<div key={`voter${i}`} className='col-3 p-10'>\n                                            <div className='voter box-shadow'>\n                                                <div className='email'>{v.email}</div>\n                                                <div title='Voter selections are hidden until all votes are received' style={{cursor: 'help', marginTop: 10, color: '#e6e6e6', fontSize: 16}}>(RESULTS HIDDEN)</div>\n                                            </div>\n                                        </div>)\n                            })}\n                        </div>\n                    </Fragment>\n                )\n            }\n        }\n    }\n    renderPendingVoters(){\n        if(this.state.poll){\n            let pendingVoters = this.state.poll.voters.filter( v => !v.voted);\n            if(pendingVoters.length > 0){\n                return(\n                    <Fragment>\n                        <div style={{margin: '40px auto 20px', borderTop: '1px solid #fff', textAlign: 'left', fontSize: 24}}>Pending Voters:</div>\n                        <div className='row'>\n                            {pendingVoters.map( (pv, i) => {\n                                return (<div key={`pending-${i}`}className='col-3 p-10'><div className='pending-voter box-shadow'>{pv.email}</div></div>)\n                            })}\n                        </div>\n                    </Fragment>\n                )\n            }\n        }\n    }\n    renderWinner(){\n        if(this.state.poll.winner){\n            return (<Fragment>\n                        <div style={{letterSpacing: 5, fontSize: 24, borderBottom: '1px solid #ddd', width: '80%', margin: '10px auto'}}>WINNER</div>\n                        <div style={{paddingBottom: 10, color: '#ffc107', letterSpacing: 5, fontSize: 44}}>{this.state.poll.winner}</div>\n                    </Fragment>\n                    )\n        }\n        return <div style={{fontSize: 20, padding: 10}}>No winner has been determined yet...</div>\n    }\n    renderResultsTable(){\n        if(this.state.poll.winner){\n            const{resultArray, winCutoff} = this.state.poll;\n            return(\n                <div style={{margin: 'auto', maxWidth: 1200, overflowX: 'scroll'}}>\n                    <table className='result-table'>\n                        <tbody>\n                            <tr>\n                                <td style={{letterSpacing: 2, fontWeight: 'bold'}} colSpan={resultArray[0][1].length + 1}>Vote Counts by Elimination Round</td>\n                            </tr>\n                            <tr>\n                                <td className='option-cell' style={{fontWeight: 'normal'}}>OPTIONS</td>\n                                {resultArray[0][1].map( (res, i) => {\n                                    return <td className='round-cell' key={`round-cell${i}`}>Round {i+1}</td>\n                                })}\n                            </tr>\n                            {resultArray.map( (val, i) => {\n                                return(\n                                    <tr key={`${val[0]}${i}`}>\n                                        <td className='option-cell'>{val[0]}</td>\n                                        {val[1].map( (cell, index) => {\n                                            let key = `cell-${cell}-${index}`;\n                                            if(cell >= winCutoff){\n                                                return <td key={key} className='win-cell'>{cell}</td>\n                                            }\n                                            else if(val[1][index+1] === undefined && cell !== undefined){\n                                                return <td key={key} className='elimination-cell'>{cell}</td>\n                                            }\n                                            else{\n                                                return <td key={key}>{cell || '-'}</td>\n                                            }\n                                        })}\n                                    </tr>\n                                )\n                            })}\n                        </tbody>\n                    </table>\n                </div>\n            )\n        }\n    }\n    renderContent() {\n        if(this.state.error){\n            return (\n                <div className='p-10 text-center font-18'>\n                    This poll no longer exists or could not be loaded.\n                </div>\n            )\n        }\n        else if(this.state.poll){\n            return (<div className='text-center'>\n                        <h1 style={{borderBottom: '1px solid #f9f9f9', maxWidth: '100%'}}>VIEW RESULTS</h1>\n                        <div style={{margin: '70px auto 20px', fontSize: 24, letterSpacing: 4}}>{this.state.poll.title}</div>\n                        <div className='winner-section'>\n                            {this.renderWinner()}\n                        </div>\n                        <div>\n                            {this.renderResultsTable()}\n                        </div>\n                        <div className='progress box-shadow'>\n                            <span>{((this.state.poll.votesReceived/this.state.poll.totalVoters)*100).toFixed(0)}% votes received</span>\n                            <div className='progress-bar-container' style={{width: `${(this.state.poll.votesReceived/this.state.poll.totalVoters)*100}%`}}>\n                                <div className='progress-bar'></div>\n                            </div>\n                        </div>\n                        {this.renderVoters()}\n                        {this.renderPendingVoters()}\n                    </div>\n                )\n        }\n        return (\n            <div className='p-10 text-center'>\n                <LoadingIcon classOption='loading-2' />\n            </div>\n        )\n    }\n    render(){\n        return(\n            <Fragment>\n                <Navbar/>\n                <div className='main-container'>\n                    <div style={{maxWidth: 1000, margin: 'auto', padding: 10}}>\n                        {this.renderContent()}\n                    </div>\n                </div>\n            </Fragment>\n        )\n    }\n}\n\nexport default PollResults;","import React, { Component } from 'react';\nimport {BrowserRouter, Route, Switch} from 'react-router-dom';\nimport Landing from './Landing';\nimport PollNew from './PollNew';\nimport PollSelectionParent from './PollSelectionParent';\nimport PollResults from './PollResults';\n\nclass App extends Component {\n  render() {\n    return (\n      <BrowserRouter>\n        <Switch>\n          <Route exact path='/' component={Landing} />\n          <Route exact path='/new-poll' component={PollNew} />\n          <Route exact path='/poll/:pollID/voter/:voterID' component={PollSelectionParent} />\n          <Route exact path='/poll/:pollID/results' component={PollResults} />\n        </Switch>\n      </BrowserRouter>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './stylesheets/index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}