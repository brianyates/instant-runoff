{"version":3,"sources":["components/Navbar.js","components/Landing.js","components/FormInput.js","components/Icon.js","components/LoadingIcon.js","components/PollConfirmationModal.js","components/PollCreatedModal.js","utils/index.js","components/PollNew.js","components/PollDroppable.js","components/PollSelectionModal.js","components/PollSuccessModal.js","components/PollSelection.js","components/PollResults.js","components/App.js","serviceWorker.js","index.js","images/logo.svg","images/thumbs_up.svg"],"names":["Navbar","react_default","a","createElement","title","href","className","alt","src","logo","Component","Landing","react","components_Navbar","style","maxWidth","margin","padding","thumbsUp","width","FormInput","state","focused","handleFocus","_this","setState","touched","handleBlur","hasError","props","submitted","error","_this2","this","_this$props","type","name","label","value","index","concat","autoComplete","onFocus","onBlur","onChange","event","handleChange","target","onClick","removeInput","vectors","plus","path","viewBox","Icon","_ref","color","icon","aria-hidden","role","xmlns","fill","d","LoadingIcon","classOption","PollConfirmationModal","submitting","handleSubmit","axios","post","values","then","data","status","handleSuccess","catch","err","console","log","renderEmails","emails","split","map","email","i","key","trim","renderOptions","options","filter","length","option","modalStatus","handleModalClose","fontSize","marginBottom","textAlign","borderTop","borderBottom","paddingLeft","components_LoadingIcon","PollCreatedModal","pollID","inputValidation","input","nameValidation","test","emailValidation","re","invalidEmails","ordinals","PollNew","inputCount","createdBy","errors","arguments","undefined","Object","assign","validateInputs","callback","submitAction","preventDefault","addInput","submitBtn","scrollIntoView","behavior","len","isDisabled","renderInputs","inputArr","push","components_FormInput","document","components_PollConfirmationModal","components_PollCreatedModal","onSubmit","paddingBottom","ref","el","marginTop","disabled","components_Icon","PollDroppable","renderPlaceholders","dragValue","placeholders","itemLength","display","items","top","react_beautiful_dnd_esm","droppableId","provided","snapshot","innerRef","isDraggingOver","background","height","position","item","id","draggableId","draggableProps","dragHandleProps","isDragging","draggableStyle","objectSpread","userSelect","overflow","alignItems","justifyContent","boxShadow","border","borderRadius","zIndex","content","placeholder","PollSelectionModal","voterID","selections","res","renderSelections","selection","letterSpacing","textDecoration","PollSuccessModal","reorder","list","startIndex","endIndex","result","Array","from","_result$splice","splice","removed","slicedToArray","move","source","destination","droppableSource","droppableDestination","sourceClone","destClone","_sourceClone$splice","PollSelection","poll","success","selected","id2List","droppable","droppable2","getList","onDragEnd","resetItems","toConsumableArray","replace","window","alert","match","params","get","_this3","voted","components_PollDroppable","_this4","renderContent","components_PollSelectionModal","components_PollSuccessModal","PollResults","voters","v","allVotesReceived","sel","cursor","pendingVoters","pv","winner","_this$state$poll","resultArray","winCutoff","overflowX","fontWeight","colSpan","val","cell","renderWinner","votesReceived","totalVoters","toFixed","renderResultsTable","renderVoters","renderPendingVoters","App","BrowserRouter","Switch","Route","exact","component","Boolean","location","hostname","ReactDOM","render","components_App","getElementById","navigator","serviceWorker","ready","registration","unregister","module","exports","__webpack_require__","p"],"mappings":"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","file":"static/js/main.74d0c0bc.chunk.js","sourcesContent":["import React, {Component} from 'react';\nimport logo from '../images/logo.svg';\n\nclass Navbar extends Component{\n    render() {\n        return(\n            <nav>\n                <a title='InstantRCV' href='/' className='float-left logo nav-items'>\n                    <span><img alt='Logo' src={logo} /></span>\n                    <span className='orange-1'>Instant</span><span className='orange-2'>RCV</span>\n                </a>\n                <div className='float-right nav-items'>\n                    <a href='/new-poll' className='btn nav-btn'>\n                        <span></span>\n                        <span>Create a Poll</span>\n                    </a>\n                </div>\n            </nav>\n        )\n    }\n}\n\nexport default Navbar;\n\n","import React, {Fragment} from 'react';\nimport Navbar from './Navbar';\nimport thumbsUp from '../images/thumbs_up.svg';\n\nconst Landing = () => {\n    return(\n        <Fragment>\n            <Navbar />\n            <div className='main-container mc-2 landing-page-container row'>\n                <div className='col-2 landing-section-1'>\n                    <div style={{maxWidth: 500, margin: 'auto', padding: 20}}>\n                    <img alt='Thumbs up' src={thumbsUp} width='80%' className='thumb-img' />\n                    </div>\n                </div>\n                <div className='col-2 landing-section-2'>\n                    <div style={{maxWidth: 500}}>\n                        <div className='landing-big-text'>Create Your Own RCV Poll</div>\n                        <div className='landing-small-text'> Use our free tool to create your own Ranked Choice \n                        Voting (RCV) polls. Simply build your poll, and we'll share it with your voters through email!</div>\n                    </div>\n                </div>\n            </div>\n        </Fragment>\n    )\n}\n\nexport default Landing;","import React, {Component} from 'react';\n\nclass FormInput extends Component{\n    state={\n        focused: false\n    }\n    handleFocus = () => {\n        this.setState({focused: true, touched: true});\n    }\n    handleBlur = () => {\n        this.setState({focused: false})\n    }\n    hasError = () => {\n        return (this.props.submitted && this.props.error)\n    }\n    render(){\n        const {type, name, label, value, index, error} = this.props;\n        return(\n            <div className={`input-container${this.state.focused ? ' focused' : ''}${this.hasError() ? ' has-error' : ''}`}>\n                <div className='input-label-container'>\n                <div className={`label${this.state.focused || this.props.value ? ' focused' : ''}`}>{label}</div>\n                    <input \n                        autoComplete={name===\"emails\" || name===\"createdBy\" ? name : \"off\"}\n                        className='form-input' \n                        type={type} \n                        name={name} \n                        onFocus={() => this.handleFocus()} \n                        onBlur={() => this.handleBlur()}\n                        value={value}\n                        onChange={event => this.props.handleChange(event.target.value, name, index)}\n                    />\n                </div>\n                <div className='border-container'>\n                    <div className='border-filler'></div>\n                </div>\n                <div className='error-msg'>{(this.hasError()) && error}</div>\n                {index > 3 && <button \n                                className='remove-item' \n                                title='Remove this voting option' \n                                onClick={() => this.props.removeInput(index)}>\n                                <span>&times;</span>\n                                </button>}\n            </div>\n        )\n    }\n}\n\nexport default FormInput;","import React from 'react';\n\nconst vectors = {\n    plus: {path: 'M416 208H272V64c0-17.67-14.33-32-32-32h-32c-17.67 0-32 14.33-32 32v144H32c-17.67 0-32 14.33-32 32v32c0 17.67 14.33 32 32 32h144v144c0 17.67 14.33 32 32 32h32c17.67 0 32-14.33 32-32V304h144c17.67 0 32-14.33 32-32v-32c0-17.67-14.33-32-32-32z',\n        viewBox: '0 0 448 512'}\n};\n\nconst Icon = ({color, icon, width}) =>{\n    return(\n        <svg aria-hidden=\"true\" role=\"img\" xmlns=\"http://www.w3.org/2000/svg\" viewBox={vectors[icon].viewBox} style={{width}}><path fill={color} d={vectors[icon].path}></path></svg>\n    )\n}\n\nexport default Icon;","import React,{Fragment} from 'react';\n\nconst LoadingIcon = ({classOption}) => {\n    return(\n        <Fragment>\n            <div className={`${classOption || 'loading-container'}`} alt=\"Loading...\">\n                <div></div>\n                <div></div>\n                <div></div>\n                <div></div>\n            </div>\n            {classOption && <div className='p-10'>Loading...</div>}\n        </Fragment>\n    )\n}\nexport default LoadingIcon;","import React, {Component} from 'react';\nimport LoadingIcon from './LoadingIcon';\nimport axios from 'axios';\n\nclass PollConfirmationModal extends Component {\n    state = {\n        submitting: false,\n        error: false\n    }\n    handleSubmit = () => {\n        this.setState({submitting: true});\n        axios.post('/api/create-poll', this.props.values)\n        .then( ({data, status}) => {\n            if(status===201){\n                this.props.handleSuccess(data)\n            }\n            else{\n                this.setState({error: true, submitting: false});\n            }\n        })\n        .catch( err => {\n            console.log(err);\n            this.setState({error: true, submitting: false});\n        })\n    }\n    renderEmails = () => {\n        return this.props.values.emails.split(',').map( (email, i) => {\n            return <li key={`${email + i}`}>{email.trim()}</li>\n        })\n    }\n    renderOptions = () => {\n        return this.props.values.options.filter(i => i.length > 0).map( (option, i) => {\n            return (<li key={`option-${i}`}>{option}</li>)\n        })\n    }\n    render(){\n        const {modalStatus, values, handleModalClose} = this.props;\n        return(\n            <div className={`modal-backdrop ${modalStatus}`}>\n                <div className='modal-container p-10'>\n                    <div style={{fontSize: 32, marginBottom: 10}} className='text-center'>Confirmation</div>\n                    <p style={{marginBottom: 20, fontSize: 16, textAlign: 'center'}}>Please confirm your poll entries are correct before submitting</p>\n                    <div className='confirmation-values p-10' style={{borderTop: '1px solid #ddd', borderBottom: '1px solid #ddd'}}>\n                        <div><strong>Poll Title: </strong>{values.title}</div>\n                        <div>\n                            <strong>Voting Options:</strong>\n                            <div>\n                                <ul style={{paddingLeft: 30}}>\n                                    {this.renderOptions()}\n                                </ul>\n                            </div>\n                        </div>\n                        <div>\n                            <strong>Email Recipients:</strong>\n                            <div>\n                                <ul style={{paddingLeft: 30}}>\n                                    {this.renderEmails()}\n                                </ul>\n                            </div>\n                        </div>\n                    </div>\n                    {this.state.submitting ? <div className='text-right p-5'><LoadingIcon /></div> : (<div className='text-right'>\n                        <button onClick={() => handleModalClose()} className='btn btn-white m-10'>Cancel</button>\n                        <button onClick={() => this.handleSubmit()} className='btn btn-orange btn-orange-2 m-10'>Looks Good!</button>\n                    </div>)}\n                    {this.state.error && <div style={{color: '#d24425'}} className='text-right p-10'>An error occurred. Please try again later.</div>}\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default PollConfirmationModal;","import React from 'react';\n\nconst PollCreatedModal = ({pollID}) => {\n    return(\n        <div>\n            <div className={`text-center modal-backdrop open`}>\n                <div className='modal-container p-10'>\n                    <div style={{color: '#2c74c1', fontSize: 49, marginBottom: 15}}>Success!</div>\n                    <div style={{borderBottom: '1px solid #ddd', borderTop: '1px solid #ddd', padding: '20px 10px', margin: '20px auto'}}>\n                        <div style={{margin: 'auto', maxWidth: 450}}>\n                            You have successfully created a new poll. \n                            You should receive an email with a link to vote, assuming you added yourself as a voter. \n                            What would you like to do next?\n                        </div>\n                    </div>\n                    <div className='text-right'>\n                        <a href='/' className='btn btn-white m-10'>Go Home</a>\n                        <a href={`/poll/${pollID}/results`} className='btn btn-orange btn-orange-2 m-10'>View Results</a>\n                    </div>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default PollCreatedModal;","export const inputValidation = input => {\n    if(!input){\n        return 'This is a required field';\n    }\n    else if (input.length > 80){\n        return \"This field can't exceed 80 characters\"\n    }\n    return null;\n}\n\nexport const nameValidation = input => {\n    if(!input){\n        return 'This is a required field';\n    }\n    else if (/^[a-z ,.'-]+$/i.test(input) === false){\n        return \"Please enter your full name\"\n    }\n    return null;\n}\n\nexport const emailValidation = emails =>{\n    if (!emails){\n        return 'This is a required field';\n    }\n    const re = /^[a-zA-Z0-9.!#$%&’*+/=?^_`{|}~-]+@[a-zA-Z0-9-]+(?:\\.[a-zA-Z0-9-]+)*$/;\n    const invalidEmails = emails.split(',')\n    .map(email => email.trim())\n    .filter(email => re.test(email) === false);\n    if (invalidEmails.length > 0){\n        return `The following emails are invalid: ${invalidEmails}`\n    }\n    if (emails.split(',').length > 200){\n        return 'No more than 200 email recipients are allowed'\n    }\n    return null;\n}\n\nexport const ordinals = ['1st', '2nd', '3rd', '4th', '5th', '6th', '7th', '8th', '9th', '10th'];","import React, {Component, Fragment} from 'react';\nimport FormInput from './FormInput';\nimport Navbar from './Navbar';\nimport Icon from './Icon';\nimport PollConfirmationModal from './PollConfirmationModal';\nimport PollCreatedModal from './PollCreatedModal';\nimport {inputValidation, emailValidation, nameValidation} from '../utils';\n\nclass PollNew extends Component {\n    state = {\n        inputCount: 3,\n        values: {\n            emails: '',\n            title: '',\n            createdBy: '',\n            options: ['', '', '', '', '', '', '', '', '', '']\n        },\n        errors: {\n            emails: '',\n            title: '',\n            createdBy: '',\n            options: ['', '', '', '', '', '', '', '', '', '']\n        },\n        hasError: false,\n        submitted: false,\n        pollID: null,\n        modalStatus: 'closed'\n    }\n    componentWillMount(){\n        document.title = 'Create a New Poll | InstantRCV';\n    }\n    handleChange = (value, name, index = null) => {\n        let values = Object.assign({}, this.state.values);\n        if(index){\n            values.options[index-1] = value;\n        }\n        else{\n            values[name] = value;\n        }\n        this.setState({values}, this.validateInputs);\n    }\n    validateInputs = (callback) => {\n        let hasError = false;\n        let errors = Object.assign({}, this.state.errors);\n        errors.emails = emailValidation(this.state.values.emails);\n        errors.title = inputValidation(this.state.values.title);\n        errors.createdBy = nameValidation(this.state.values.createdBy);\n        if(errors.emails || errors.title) {hasError = true}\n        for (let i = 0; i < this.state.inputCount; i++){\n            errors.options[i] = inputValidation(this.state.values.options[i]);\n            if(errors.options[i]){hasError = true}\n        }\n        this.setState({errors, hasError}, callback);\n    }\n    submitAction = () => {\n        if(!this.state.hasError){\n            this.setState({modalStatus: 'open'})\n        }\n    }\n    handleSubmit = event => {\n        event.preventDefault();\n        this.setState({submitted: true}, this.validateInputs(this.submitAction));\n    }\n    handleSuccess = pollID => {\n        this.setState({pollID, modalStatus: 'closed'})\n    }\n    addInput = () => {\n        this.setState({inputCount: this.state.inputCount+1});\n        this.submitBtn.scrollIntoView({ behavior: \"smooth\" });\n    }\n    removeInput = index => {\n        let values = Object.assign({}, this.state.values);\n        values.options[index-1] = '';\n        let len = values.options.length;\n        for(let i = index - 1; i < len - 1; i++){\n            values.options[i] = values.options[i+1]\n        }\n        values.options[len] = '';\n        this.setState({values, inputCount: this.state.inputCount - 1});\n    }\n    isDisabled = () => {\n        return this.state.inputCount >= this.state.values.options.length\n    }\n    renderInputs = () => {\n        let inputArr=[];\n        for(let i = 0; i < this.state.inputCount; i++){\n            inputArr.push(<FormInput \n                            key={`option${i}`}\n                            type='text' \n                            name={`option$${i}`} \n                            label={`Enter voting option #${i+1}`}\n                            index={i+1}\n                            value={this.state.values.options[i]}\n                            error={this.state.errors.options[i]}\n                            submitted={this.state.submitted}\n                            handleChange={this.handleChange}\n                            removeInput={this.removeInput}\n                            />)\n        }\n        return inputArr;\n    }\n    render(){\n        return(\n            <Fragment>\n                {this.state.modalStatus === 'open' && <PollConfirmationModal \n                                                        modalStatus={'open'} \n                                                        values={this.state.values} \n                                                        handleModalClose={() => this.setState({modalStatus: 'closed'})}\n                                                        handleSuccess={this.handleSuccess}\n                                                        />}\n                {this.state.pollID && <PollCreatedModal pollID={this.state.pollID} />}\n                <Navbar />\n                <div className='main-container'>\n                    <h1 className='text-center'>Create a New RCV Poll</h1>\n                    <div className='p-10 text-center' style={{margin: 'auto', maxWidth: 600}}>*Limit 10 voting options per poll. Please separate each vote recipient's email address with a comma.</div>\n                    <div className='form-container'>\n                        <form onSubmit={this.handleSubmit}>\n                            <input type=\"hidden\" value=\"something\" />\n                            <FormInput \n                                type='text' \n                                name='createdBy' \n                                label='Enter your full name' \n                                value={this.state.values.createdBy} \n                                error={this.state.errors.createdBy}\n                                submitted={this.state.submitted}\n                                handleChange={this.handleChange} \n                            />\n                            <FormInput \n                                type='text' \n                                name='emails' \n                                label='Enter voter emails' \n                                value={this.state.values.emails} \n                                error={this.state.errors.emails}\n                                submitted={this.state.submitted}\n                                handleChange={this.handleChange} \n                            />\n                            <FormInput \n                                type='text' \n                                name='title' \n                                label='Enter a poll title' \n                                value={this.state.values.title}\n                                error={this.state.errors.title}\n                                submitted={this.state.submitted}\n                                handleChange={this.handleChange} \n                            />\n                            {this.renderInputs()}\n                            <div style={{paddingBottom: 20}}>\n                                <button \n                                ref={el => this.submitBtn = el}\n                                className={`float-right btn btn-orange`}\n                                >SUBMIT POLL</button>\n                            </div>\n                        </form>\n                        <button \n                            style={{marginTop: -20}}\n                            className={`float-left btn btn-white${this.isDisabled() ? ' disabled': ''}`}\n                            disabled={this.isDisabled()}\n                            onClick={() => this.addInput()}><Icon icon='plus' width='10px' color='#333'/> <span>Add Option</span></button>\n                    </div>\n                </div>\n            </Fragment>\n        )\n    }\n}\n\nexport default PollNew;","import React, {Component} from 'react';\nimport {Droppable, Draggable } from 'react-beautiful-dnd';\nimport {ordinals} from '../utils';\n\nconst getItemStyle = (isDragging, draggableStyle) => ({\n    userSelect: 'none',\n    height: 100,\n    display: 'flex',\n    overflow: 'hidden',\n    alignItems: 'center',\n    justifyContent: 'center',\n    marginBottom: 10,\n    background: isDragging ? '#333' : '#ffc107',\n    color: isDragging ? '#fff' : '#333',\n    boxShadow: isDragging ? '0 2px 8px 0 rgba(0,0,0,.2), 0 3px 4px 0 rgba(0,0,0,.14), 0 3px 3px 1px rgba(0,0,0,.12)' : 'none',\n    border: '1px solid #555',\n    borderRadius: 5,\n    zIndex: 99999,\n    ...draggableStyle\n});\n\nconst getListStyle = (isDraggingOver, itemLength) => ({\n    background: isDraggingOver ? '#bbb' : '#777',\n    padding: 10,\n    width: '100%',\n    height: (110 * itemLength) + 10,\n    position: 'relative'\n});\n\nclass PollDroppable extends Component{\n    renderPlaceholders = (dragValue) => {\n        let placeholders = [];\n        for (let i = 0; i < this.props.itemLength; i++){\n            placeholders.push(\n                <div className='item-placeholder' key={`ph-${i}`} style={{display: this.props.items.length + dragValue > i ? 'none': 'flex', top: i * 110 + 10}}>\n                    Drag your {ordinals[i]} choice here\n                </div>\n            )\n        }\n        return placeholders;\n    }\n    render(){\n        return(\n            <Droppable droppableId={this.props.droppableId}>\n            {(provided, snapshot) => (\n                <div\n                    ref={provided.innerRef}\n                    style={getListStyle(snapshot.isDraggingOver, this.props.itemLength)}>\n                    {this.props.items.map((item, index) => (\n                        <Draggable\n                            key={item.id}\n                            draggableId={item.id}\n                            index={index}>\n                            {(provided, snapshot) => (\n                                <div\n                                    ref={provided.innerRef}\n                                    {...provided.draggableProps}\n                                    {...provided.dragHandleProps}\n                                    style={getItemStyle(\n                                        snapshot.isDragging,\n                                        provided.draggableProps.style\n                                    )}>\n                                    {item.content}\n                                </div>\n                            )}\n                        </Draggable>\n                    ))}\n                    {this.props.droppableId==='droppable2' && this.renderPlaceholders(snapshot.isDraggingOver ? 1 : 0)}\n                    {provided.placeholder}\n                </div>\n            )}\n        </Droppable>\n        )\n    }\n}\n\nexport default PollDroppable;","import React, {Component} from 'react';\nimport axios from 'axios';\nimport LoadingIcon from './LoadingIcon';\nimport {ordinals} from '../utils';\n\nclass PollSelectionModal extends Component {\n    state = {\n        submitting: false,\n        error: false\n    }\n    handleSubmit = () => {\n        this.setState({submitting: true})\n        axios.post(`/api/poll/${this.props.pollID}/voter/${this.props.voterID}`, this.props.selections)\n        .then( res =>{\n            if(res.status===202){\n                this.props.handleSuccess();\n            }\n            else{\n                this.setState({error: true, submitting: false});\n            }\n        })\n        .catch( () => {\n            this.setState({error: true, submitting: false});\n        })\n    }\n    renderSelections = () => {\n       return this.props.selections.map( (selection, index) => {\n            return(<tr key={`r-${index}`}>\n                        <td><strong>{ordinals[index]} Choice:</strong></td>\n                        <td>{selection}</td>\n                    </tr>\n                )\n        })\n    }\n    render(){\n        const {modalStatus, title, handleModalClose} = this.props;\n        return(\n            <div className={`text-center modal-backdrop ${modalStatus}`}>\n                <div className='modal-container p-10'>\n                    <div style={{fontSize: 28, marginBottom: 20}}>{title}</div>\n                    <p style={{marginBottom: 20, fontSize: 16}}>Please confirm your poll entries are correct before submitting</p>\n                    <div style={{borderBottom: '1px solid #ddd', borderTop: '1px solid #ddd', padding: '10px 10px 20px 10px', margin: '20px auto'}}>\n                        <div style={{color: '#444', letterSpacing: 3, marginBottom: 20, fontSize: 22, textDecoration: 'underline'}}>YOUR SELECTIONS</div>\n                        <div>\n                            <table className='table'>\n                                <tbody>\n                                    {this.renderSelections()}\n                                </tbody>\n                            </table>\n                        </div>\n                    </div>\n                    {this.state.submitting ? <div className='text-right p-5'><LoadingIcon /></div> : (<div className='text-right'>\n                        <button onClick={() => handleModalClose()} className='btn btn-white m-10'>Cancel</button>\n                        <button onClick={() => this.handleSubmit()} className='btn btn-orange btn-orange-2 m-10'>Looks Good!</button>\n                    </div>)}\n                    {this.state.error && <div style={{color: '#d24425'}} className='text-right p-10'>An error occurred. Please try again later.</div>}\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default PollSelectionModal;","import React from 'react';\n\nconst PollSuccessModal = ({pollID}) => {\n    return(\n        <div>\n            <div className={`text-center modal-backdrop open`}>\n                <div className='modal-container p-10'>\n                    <div style={{color: '#2c74c1', fontSize: 49, marginBottom: 15}}>Success!</div>\n                    <div style={{borderBottom: '1px solid #ddd', borderTop: '1px solid #ddd', padding: '20px 10px', margin: '20px auto'}}>\n                        <div style={{margin: 'auto', maxWidth: 400}}>\n                            We have successfully received your voting results. Now what would you like to do next?\n                        </div>\n                    </div>\n                    <div className='text-right'>\n                        <a href='/' className='btn btn-white m-10'>Go Home</a>\n                        <a href={`/poll/${pollID}/results`} className='btn btn-orange btn-orange-2 m-10'>View Results</a>\n                    </div>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default PollSuccessModal;","import React, { Component, Fragment} from 'react';\nimport axios from 'axios';\nimport { DragDropContext} from 'react-beautiful-dnd';\nimport Navbar from './Navbar';\nimport PollDroppable from './PollDroppable';\nimport PollSelectionModal from './PollSelectionModal';\nimport PollSuccessModal from './PollSuccessModal';\nimport LoadingIcon from './LoadingIcon';\n\n// a little function to help us with reordering the result\nconst reorder = (list, startIndex, endIndex) => {\n    const result = Array.from(list);\n    const [removed] = result.splice(startIndex, 1);\n    result.splice(endIndex, 0, removed);\n    return result;\n};\n\nconst move = (source, destination, droppableSource, droppableDestination) => {\n    const sourceClone = Array.from(source);\n    const destClone = Array.from(destination);\n    const [removed] = sourceClone.splice(droppableSource.index, 1);\n    destClone.splice(droppableDestination.index, 0, removed);\n    const result = {};\n    result[droppableSource.droppableId] = sourceClone;\n    result[droppableDestination.droppableId] = destClone;\n    return result;\n};\n\nclass PollSelection extends Component {\n    state = {\n        poll: null,\n        error: false,\n        success: false,\n        modalStatus: 'closed',\n        itemLength: 0,\n        items: [],\n        selected: []\n    };\n\n    id2List = {\n        droppable: 'items',\n        droppable2: 'selected'\n    };\n\n    getList = id => this.state[this.id2List[id]];\n\n    onDragEnd = result => {\n        const { source, destination } = result;\n        if (!destination) {\n            return;\n        }\n        if (source.droppableId === destination.droppableId) {\n            const items = reorder(\n                this.getList(source.droppableId),\n                source.index,\n                destination.index\n            );\n            let state = { items };\n            if (source.droppableId === 'droppable2') {\n                state = { selected: items };\n            }\n            this.setState(state);\n        } else {\n            const result = move(\n                this.getList(source.droppableId),\n                this.getList(destination.droppableId),\n                source,\n                destination\n            );\n            this.setState({\n                items: result.droppable,\n                selected: result.droppable2\n            });\n        }\n    };\n    componentWillMount(){\n        document.title = 'Make Your Poll Selections | InstantRCV';\n        this.pollID = this.props.match.params.pollID;\n        this.voterID = this.props.match.params.voterID;\n        axios.get(`/api/poll/${this.pollID}/voter/${this.voterID}`)\n        .then( res => {\n            if(res.data){\n                let items = res.data.options.map( (item, index) => ({\n                    id: `${item.replace(/ /, '')}${index}`,\n                    content: item\n                }))\n                this.setState({poll: res.data, items, itemLength: items.length});\n            }\n            else{\n                this.setState({error: true})\n            }\n        })\n        .catch(() => {\n            this.setState({error: true})\n        })\n    }\n    resetItems = () => {\n        let initItems = [...this.state.poll.options];\n        let items = initItems.map( (item, index) => ({\n            id: `${item.replace(/ /, '')}${index}`,\n            content: item\n        }))\n        this.setState({items, selected: []});\n    }\n    handleSubmit = () => {\n        if(this.state.selected.length !== this.state.itemLength){\n            window.alert('Please rank all options before submitting your vote')\n        }\n        else{\n            this.setState({modalStatus: 'open'})\n        }\n    }\n    handleSuccess = () => {\n        this.setState({success: true, modalStatus: 'closed'})\n    }\n    renderContent(){\n        if(this.state.error){\n            return(\n                <div>\n                    This poll could not be loaded or does not exist.\n                </div>\n            )\n        }\n        else if (!this.state.poll){\n            return(\n                <div>\n                    <LoadingIcon />\n                    Loading...\n                </div>\n            )\n        }\n        else if (this.state.poll.voted){\n           return(\n                <div>\n                    You have already voted in this poll. <a href={`/poll/${this.pollID}/results`}style={{color: \"#fff\", textDecoration: \"underline\"}}>Click here to view the results</a>.\n                </div>\n           )\n        }\n        return(\n            <div style={{maxWidth: 800, margin: 'auto'}}>\n                <h1 className='text-center' style={{marginBottom: 10}}>{this.state.poll.title}</h1>\n                <div className='p-10 text-center'>Please rank the provided options in order \n                    from most preferable to least preferable</div>\n                <div className='border-holder'></div>\n                <div className='row' style={{marginBottom: 20}}>\n                    <DragDropContext onDragEnd={this.onDragEnd}>\n                        <div className='col-2-always p-5'>\n                            <div className='text-center font-18 p-5'>OPTIONS</div>\n                            <PollDroppable items={this.state.items} droppableId='droppable' itemLength={this.state.itemLength} />\n                        </div>\n                        <div className='col-2-always p-5'>\n                            <div className='text-center font-18 p-5'>SELECTIONS</div>\n                            <PollDroppable items={this.state.selected} droppableId='droppable2' itemLength={this.state.itemLength} />\n                        </div>\n                    </DragDropContext>\n                </div>\n                <div className='border-holder'></div>\n                <div className='text-right'>\n                    <button onClick={() => this.resetItems()} className='btn btn-black m-10'>RESET</button>\n                    <button onClick={() => this.handleSubmit()} style={{width: 130, fontSize: 22}} className='btn btn-orange m-10 box-shadow'>SUBMIT</button>\n                </div>\n            </div>\n        )\n    }\n    render() {\n        return(\n            <Fragment>\n                <Navbar/>\n                <div className='main-container text-center'>\n                    {this.renderContent()}\n                </div>\n                <PollSelectionModal \n                handleModalClose={() => this.setState({modalStatus: 'closed'})}\n                handleSuccess={this.handleSuccess}\n                modalStatus={this.state.modalStatus}\n                title={this.props.title}\n                selections={this.state.selected.map( ({content}) => content)}\n                pollID={this.pollID}\n                voterID={this.voterID}\n                />\n                {this.state.success && <PollSuccessModal pollID={this.pollID}/>}\n            </Fragment>\n        )\n    }\n}\n\nexport default PollSelection;","import React, {Component, Fragment} from 'react';\nimport Navbar from './Navbar';\nimport LoadingIcon from './LoadingIcon'\nimport axios from 'axios';\nimport {ordinals} from '../utils';\n\nclass PollResults extends Component{\n    state = {\n        poll: null,\n        error: false\n    }\n    componentWillMount(){\n        document.title = \"View Poll Results | InstantRCV\"\n        this.pollID = this.props.match.params.pollID;\n        axios.get(`/api/results/${this.pollID}`)\n        .then( res => {\n            if(res.status === 200){\n                this.setState({poll: res.data});\n            }\n            else{\n                this.setState({error:true});\n            }\n        })\n        .catch( () => {\n            this.setState({error: true})\n        })\n    }\n    renderVoters(){\n        if(this.state.poll){\n            let voters = this.state.poll.voters.filter( v => v.voted);\n            if(this.state.poll.allVotesReceived){\n                return(\n                    <Fragment>\n                        <div style={{margin: '20px auto', borderTop: '1px solid #fff', textAlign: 'left', fontSize: 24}}>Voter Selections:</div>\n                        <div className='row'>\n                            {voters.map( (v,i) => {\n                                return (<div key={`voter${i}`} className='col-3 p-10'>\n                                            <div className='voter box-shadow'>\n                                                <div className='email font-18'>{v.email}</div>\n                                                <table className='table'>\n                                                    <tbody>\n                                                        {v.selections.map( (sel, i) => {\n                                                            return (<tr key={`row-${i}`}>\n                                                                        <td><strong>{ordinals[i]} Choice:</strong></td>\n                                                                        <td>{sel}</td>\n                                                                    </tr>\n                                                            )\n                                                        })}\n                                                    </tbody>\n                                                </table>\n                                            </div>\n                                        </div>)\n                            })}\n                        </div>\n                    </Fragment>\n                )\n            }\n            if(voters.length > 0){\n                return(\n                    <Fragment>\n                        <div style={{margin: '20px auto', borderTop: '1px solid #fff', textAlign: 'left', fontSize: 24}}>Voter Selections:</div>\n                        <div className='row'>\n                            {voters.map( (v,i) => {\n                                return (<div key={`voter${i}`} className='col-3 p-10'>\n                                            <div className='voter box-shadow'>\n                                                <div className='email'>{v.email}</div>\n                                                <div title='Voter selections are hidden until all votes are received' style={{cursor: 'help', marginTop: 10, color: '#e6e6e6', fontSize: 16}}>(RESULTS HIDDEN)</div>\n                                            </div>\n                                        </div>)\n                            })}\n                        </div>\n                    </Fragment>\n                )\n            }\n        }\n    }\n    renderPendingVoters(){\n        if(this.state.poll){\n            let pendingVoters = this.state.poll.voters.filter( v => !v.voted);\n            if(pendingVoters.length > 0){\n                return(\n                    <Fragment>\n                        <div style={{margin: '40px auto 20px', borderTop: '1px solid #fff', textAlign: 'left', fontSize: 24}}>Pending Voters:</div>\n                        <div className='row'>\n                            {pendingVoters.map( (pv, i) => {\n                                return (<div key={`pending-${i}`}className='col-3 p-10'><div className='pending-voter box-shadow'>{pv.email}</div></div>)\n                            })}\n                        </div>\n                    </Fragment>\n                )\n            }\n        }\n    }\n    renderWinner(){\n        if(this.state.poll.winner){\n            return (<Fragment>\n                        <div style={{letterSpacing: 5, fontSize: 24, borderBottom: '1px solid #ddd', width: '80%', margin: '10px auto'}}>WINNER</div>\n                        <div style={{paddingBottom: 10, color: '#ffc107', letterSpacing: 5, fontSize: 44}}>{this.state.poll.winner}</div>\n                    </Fragment>\n                    )\n        }\n        return <div style={{fontSize: 20, padding: 10}}>No winner has been determined yet...</div>\n    }\n    renderResultsTable(){\n        if(this.state.poll.winner){\n            const{resultArray, winCutoff} = this.state.poll;\n            return(\n                <div style={{margin: 'auto', maxWidth: 1200, overflowX: 'scroll'}}>\n                    <table className='result-table'>\n                        <tbody>\n                            <tr>\n                                <td style={{letterSpacing: 2, fontWeight: 'bold'}} colSpan={resultArray[0][1].length + 1}>Vote Counts by Elimination Round</td>\n                            </tr>\n                            <tr>\n                                <td className='round-cell' style={{fontWeight: 'normal'}}>OPTIONS</td>\n                                {resultArray[0][1].map( (res, i) => {\n                                    return <td className='round-cell' key={`round-cell${i}`}>Round {i+1}</td>\n                                })}\n                            </tr>\n                            {resultArray.map( (val, i) => {\n                                return(\n                                    <tr key={`${val[0]}${i}`}>\n                                        <td className='option-cell'>{val[0]}</td>\n                                        {val[1].map( (cell, index) => {\n                                            let key = `cell-${cell}-${index}`;\n                                            if(cell >= winCutoff){\n                                                return <td key={key} className='win-cell'>{cell}</td>\n                                            }\n                                            else if(val[1][index+1] === undefined && cell !== undefined){\n                                                return <td key={key} className='elimination-cell'>{cell}</td>\n                                            }\n                                            else{\n                                                return <td key={key}>{cell === 0 ? 0 : (cell || '-')}</td>\n                                            }\n                                        })}\n                                    </tr>\n                                )\n                            })}\n                        </tbody>\n                    </table>\n                </div>\n            )\n        }\n    }\n    renderContent() {\n        if(this.state.error){\n            return (\n                <div className='p-10 text-center font-18'>\n                    This poll no longer exists or could not be loaded.\n                </div>\n            )\n        }\n        else if(this.state.poll){\n            return (<div className='text-center'>\n                        <h1 style={{borderBottom: '1px solid #f9f9f9', maxWidth: '100%'}}>POLL RESULTS</h1>\n                        <div style={{margin: '50px auto 30px', fontSize: 22, letterSpacing: 3, maxWidth: 600}}>{this.state.poll.title}</div>\n                        <div className='winner-section'>\n                            {this.renderWinner()}\n                        </div>\n                        <div className='progress box-shadow'>\n                            <span>{((this.state.poll.votesReceived/this.state.poll.totalVoters)*100).toFixed(0)}% votes received</span>\n                            <div className='progress-bar-container' style={{width: `${(this.state.poll.votesReceived/this.state.poll.totalVoters)*100}%`}}>\n                                <div className='progress-bar'></div>\n                            </div>\n                        </div>\n                        <div>\n                            {this.renderResultsTable()}\n                        </div>\n                        {this.renderVoters()}\n                        {this.renderPendingVoters()}\n                    </div>\n                )\n        }\n        return (\n            <div className='p-10 text-center'>\n                <LoadingIcon classOption='loading-2' />\n            </div>\n        )\n    }\n    render(){\n        return(\n            <Fragment>\n                <Navbar/>\n                <div className='main-container'>\n                    <div style={{maxWidth: 1000, margin: 'auto', padding: 10}}>\n                        {this.renderContent()}\n                    </div>\n                </div>\n            </Fragment>\n        )\n    }\n}\n\nexport default PollResults;","import React, { Component } from 'react';\nimport {BrowserRouter, Route, Switch} from 'react-router-dom';\nimport Landing from './Landing';\nimport PollNew from './PollNew';\nimport PollSelection from './PollSelection';\nimport PollResults from './PollResults';\n\nclass App extends Component {\n  render() {\n    return (\n      <BrowserRouter>\n        <Switch>\n          <Route exact path='/' component={Landing} />\n          <Route exact path='/new-poll' component={PollNew} />\n          <Route exact path='/poll/:pollID/voter/:voterID' component={PollSelection} />\n          <Route exact path='/poll/:pollID/results' component={PollResults} />\n        </Switch>\n      </BrowserRouter>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './stylesheets/index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.5f854386.svg\";","module.exports = __webpack_public_path__ + \"static/media/thumbs_up.914ed44c.svg\";"],"sourceRoot":""}