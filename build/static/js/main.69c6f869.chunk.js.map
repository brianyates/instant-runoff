{"version":3,"sources":["images/logo.svg","images/thumbs_up.svg","components/Navbar.js","components/Landing.js","components/FormInput.js","components/Icon.js","components/LoadingIcon.js","components/PollConfirmationModal.js","components/PollCreatedModal.js","utils/index.js","components/PollNew.js","components/CustomDraggable.js","components/PollSelectionModal.js","components/SuccessModal.js","components/PollSelections.js","components/PollSelectionParent.js","components/PollResults.js","components/App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Navbar","react_default","a","createElement","title","href","className","alt","src","logo","Component","Landing","react","components_Navbar","style","maxWidth","margin","padding","thumbsUp","width","fontSize","letterSpacing","marginBottom","FormInput","state","focused","handleFocus","_this","setState","touched","handleBlur","hasError","props","submitted","error","_this2","this","_this$props","type","name","label","value","index","concat","autoComplete","onFocus","onBlur","onChange","event","handleChange","target","onClick","removeInput","vectors","plus","path","viewBox","Icon","_ref","color","icon","aria-hidden","role","xmlns","fill","d","LoadingIcon","classOption","PollConfirmationModal","submitting","handleSubmit","axios","post","values","then","data","status","handleSuccess","catch","err","console","log","renderEmails","emails","split","map","email","i","key","trim","renderOptions","options","filter","length","option","modalStatus","handleModalClose","textAlign","borderTop","borderBottom","paddingLeft","components_LoadingIcon","PollCreatedModal","pollID","inputValidation","input","emailValidation","re","invalidEmails","test","ordinals","PollNew","inputCount","errors","arguments","undefined","Object","assign","validateInputs","callback","submitAction","preventDefault","addInput","submitBtn","scrollIntoView","behavior","len","isDisabled","renderInputs","inputArr","push","components_FormInput","document","components_PollConfirmationModal","components_PollCreatedModal","onSubmit","paddingBottom","ref","el","marginTop","disabled","components_Icon","CLOSE_ENOUGH","CustomDraggable","initialPosition","element","handleResize","_this$state$element$g","getBoundingClientRect","x","y","handleRef","_element$getBoundingC","handleStop","e","ui","closeEnough","_ui$node$getBoundingC","node","ph","placeholders","dims","x2","y2","Math","sqrt","init","setPosition","selection","position","window","addEventListener","_","debounce","removeEventListener","react_draggable_default","onStop","PollSelectionModal","voterID","selections","res","renderSelections","textDecoration","SuccessModal","PollSelections","draggables","success","newSelection","toConsumableArray","components_CustomDraggable","renderPlaceholders","opt","resetDraggables","canSubmit","alert","components_PollSelectionModal","components_SuccessModal","PollSelectionParent","poll","match","params","get","components_PollSelections","renderContent","PollResults","voters","v","voted","allVotesReceived","sel","cursor","pendingVoters","pv","winner","renderWinner","votesReceived","totalVoters","toFixed","renderVoters","renderPendingVoters","App","BrowserRouter","Switch","Route","exact","component","Boolean","location","hostname","ReactDOM","render","components_App","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.69c6f869.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5f854386.svg\";","module.exports = __webpack_public_path__ + \"static/media/thumbs_up.914ed44c.svg\";","import React, {Component} from 'react';\nimport logo from '../images/logo.svg';\n\nclass Navbar extends Component{\n    render() {\n        return(\n            <nav>\n                <a title='InstantRCV' href='/' className='float-left logo nav-items'>\n                    <span><img alt='Logo' src={logo} /></span>\n                    <span className='orange-1'>Instant</span><span className='orange-2'>RCV</span>\n                </a>\n                <div className='float-right nav-items'>\n                    <a href='/new-poll' className='btn nav-btn'>\n                        <span></span>\n                        <span>Create a Poll</span>\n                    </a>\n                </div>\n            </nav>\n        )\n    }\n}\n\nexport default Navbar;\n\n","import React, {Fragment} from 'react';\nimport Navbar from './Navbar';\nimport thumbsUp from '../images/thumbs_up.svg';\n\nconst Landing = () => {\n    return(\n        <Fragment>\n            <Navbar />\n            <div className='main-container mc-2 landing-page-container row'>\n                <div className='col-2 landing-section-1'>\n                    <div style={{maxWidth: 500, margin: 'auto', padding: 20}}>\n                    <img alt='Thumbs up' src={thumbsUp} width='80%' className='thumb-img' />\n                    </div>\n                </div>\n                <div className='col-2 landing-section-2'>\n                    <div style={{maxWidth: 500}}>\n                        <div style={{fontSize: 60, letterSpacing: 2, marginBottom: 30}}>Create Your Own RCV Poll</div>\n                        <div style={{fontSize: 26, letterSpacing: 1}}> Use our free tool to create your own Ranked Choice \n                        Voting (RCV) polls. Simply build your poll, and we'll share it with your voters through email!</div>\n                    </div>\n                </div>\n            </div>\n        </Fragment>\n    )\n}\n\nexport default Landing;","import React, {Component} from 'react';\n\nclass FormInput extends Component{\n    state={\n        focused: false\n    }\n    handleFocus = () => {\n        this.setState({focused: true, touched: true});\n    }\n    handleBlur = () => {\n        this.setState({focused: false})\n    }\n    hasError = () => {\n        return (this.props.submitted && this.props.error)\n    }\n    render(){\n        const {type, name, label, value, index, error} = this.props;\n        return(\n            <div className={`input-container${this.state.focused ? ' focused' : ''}${this.hasError() ? ' has-error' : ''}`}>\n                <div className='input-label-container'>\n                <div className={`label${this.state.focused || this.props.value ? ' focused' : ''}`}>{label}</div>\n                    <input \n                        autoComplete=\"off\"\n                        className='form-input' \n                        type={type} \n                        name={name} \n                        onFocus={() => this.handleFocus()} \n                        onBlur={() => this.handleBlur()}\n                        value={value}\n                        onChange={event => this.props.handleChange(event.target.value, name, index)}\n                    />\n                </div>\n                <div className='border-container'>\n                    <div className='border-filler'></div>\n                </div>\n                <div className='error-msg'>{(this.hasError()) && error}</div>\n                {index > 3 && <button \n                                className='remove-item' \n                                title='Remove this voting option' \n                                onClick={() => this.props.removeInput(index)}>\n                                <span>&times;</span>\n                                </button>}\n            </div>\n        )\n    }\n}\n\nexport default FormInput;","import React from 'react';\n\nconst vectors = {\n    plus: {path: 'M416 208H272V64c0-17.67-14.33-32-32-32h-32c-17.67 0-32 14.33-32 32v144H32c-17.67 0-32 14.33-32 32v32c0 17.67 14.33 32 32 32h144v144c0 17.67 14.33 32 32 32h32c17.67 0 32-14.33 32-32V304h144c17.67 0 32-14.33 32-32v-32c0-17.67-14.33-32-32-32z',\n        viewBox: '0 0 448 512'}\n};\n\nconst Icon = ({color, icon, width}) =>{\n    return(\n        <svg aria-hidden=\"true\" role=\"img\" xmlns=\"http://www.w3.org/2000/svg\" viewBox={vectors[icon].viewBox} style={{width}}><path fill={color} d={vectors[icon].path}></path></svg>\n    )\n}\n\nexport default Icon;","import React,{Fragment} from 'react';\n\nconst LoadingIcon = ({classOption}) => {\n    return(\n        <Fragment>\n            <div className={`${classOption || 'loading-container'}`} alt=\"Loading...\">\n                <div></div>\n                <div></div>\n                <div></div>\n                <div></div>\n            </div>\n            {classOption && <div className='p-10'>Loading...</div>}\n        </Fragment>\n    )\n}\nexport default LoadingIcon;","import React, {Component} from 'react';\nimport LoadingIcon from './LoadingIcon';\nimport axios from 'axios';\n\nclass PollConfirmationModal extends Component {\n    state = {\n        submitting: false,\n        error: false\n    }\n    handleSubmit = () => {\n        this.setState({submitting: true});\n        axios.post('/api/create-poll', this.props.values)\n        .then( ({data, status}) => {\n            if(status===201){\n                this.props.handleSuccess(data)\n            }\n            else{\n                this.setState({error: true, submitting: false});\n            }\n        })\n        .catch( err => {\n            console.log(err);\n            this.setState({error: true, submitting: false});\n        })\n    }\n    renderEmails = () => {\n        return this.props.values.emails.split(',').map( (email, i) => {\n            return <li key={`${email + i}`}>{email.trim()}</li>\n        })\n    }\n    renderOptions = () => {\n        return this.props.values.options.filter(i => i.length > 0).map( (option, i) => {\n            return (<li key={`option-${i}`}>{option}</li>)\n        })\n    }\n    render(){\n        const {modalStatus, values, handleModalClose} = this.props;\n        return(\n            <div className={`modal-backdrop ${modalStatus}`}>\n                <div className='modal-container p-10'>\n                    <div style={{fontSize: 32, marginBottom: 10}} className='text-center'>Confirmation</div>\n                    <p style={{marginBottom: 20, fontSize: 16, textAlign: 'center'}}>Please confirm your poll entries are correct before submitting</p>\n                    <div className='confirmation-values p-10' style={{borderTop: '1px solid #ddd', borderBottom: '1px solid #ddd'}}>\n                        <div><strong>Poll Title: </strong>{values.title}</div>\n                        <div>\n                            <strong>Voting Options:</strong>\n                            <div>\n                                <ul style={{paddingLeft: 30}}>\n                                    {this.renderOptions()}\n                                </ul>\n                            </div>\n                        </div>\n                        <div>\n                            <strong>Email Recipients:</strong>\n                            <div>\n                                <ul style={{paddingLeft: 30}}>\n                                    {this.renderEmails()}\n                                </ul>\n                            </div>\n                        </div>\n                    </div>\n                    {this.state.submitting ? <div className='text-right p-5'><LoadingIcon /></div> : (<div className='text-right'>\n                        <button onClick={() => handleModalClose()} className='btn btn-white m-10'>Cancel</button>\n                        <button onClick={() => this.handleSubmit()} className='btn btn-orange btn-orange-2 m-10'>Looks good, fire away!</button>\n                    </div>)}\n                    {this.state.error && <div style={{color: '#d24425'}} className='text-right p-10'>An error occurred. Please try again later.</div>}\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default PollConfirmationModal;","import React from 'react';\n\nconst PollCreatedModal = ({pollID}) => {\n    return(\n        <div>\n            <div className={`text-center modal-backdrop open`}>\n                <div className='modal-container p-10'>\n                    <div style={{color: '#2c74c1', fontSize: 49, marginBottom: 15}}>Success!</div>\n                    <div style={{borderBottom: '1px solid #ddd', borderTop: '1px solid #ddd', padding: '20px 10px', margin: '20px auto'}}>\n                        <div style={{margin: 'auto', maxWidth: 450}}>\n                            You have successfully created a new poll. \n                            You should receive an email with a link to vote, assuming you added yourself as a voter. \n                            What would you like to do next?\n                        </div>\n                    </div>\n                    <div className='text-right'>\n                        <a href='/' className='btn btn-white m-10'>Go Home</a>\n                        <a href={`/poll/${pollID}/results`} className='btn btn-orange btn-orange-2 m-10'>View Results</a>\n                    </div>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default PollCreatedModal;","export const inputValidation = input => {\n    if(!input){\n        return 'This is a required field';\n    }\n    else if (input.length > 80){\n        return \"This field can't exceed 80 characters\"\n    }\n    return null;\n}\n\nexport const emailValidation = emails =>{\n    if (!emails){\n        return 'This is a required field';\n    }\n    const re = /^[a-zA-Z0-9.!#$%&’*+/=?^_`{|}~-]+@[a-zA-Z0-9-]+(?:\\.[a-zA-Z0-9-]+)*$/;\n    const invalidEmails = emails.split(',')\n    .map(email => email.trim())\n    .filter(email => re.test(email) === false);\n    if (invalidEmails.length > 0){\n        return `The following emails are invalid: ${invalidEmails}`\n    }\n    if (emails.split(',').length > 200){\n        return 'No more than 200 email recipients are allowed'\n    }\n    return null;\n}\n\nexport const ordinals = ['1st', '2nd', '3rd', '4th', '5th', '6th', '7th', '8th', '9th', '10th'];","import React, {Component, Fragment} from 'react';\nimport FormInput from './FormInput';\nimport Navbar from './Navbar';\nimport Icon from './Icon';\nimport PollConfirmationModal from './PollConfirmationModal';\nimport PollCreatedModal from './PollCreatedModal';\nimport {inputValidation, emailValidation} from '../utils';\n\nclass PollNew extends Component {\n    state = {\n        inputCount: 3,\n        values: {\n            emails: '',\n            title: '',\n            options: ['', '', '', '', '', '', '', '', '', '']\n        },\n        errors: {\n            emails: '',\n            title: '',\n            options: ['', '', '', '', '', '', '', '', '', '']\n        },\n        hasError: false,\n        submitted: false,\n        pollID: null,\n        modalStatus: 'closed'\n    }\n    componentWillMount(){\n        document.title = 'Create a New Poll | InstantRCV';\n    }\n    handleChange = (value, name, index = null) => {\n        let values = Object.assign({}, this.state.values);\n        if(index){\n            values.options[index-1] = value;\n        }\n        else{\n            values[name] = value;\n        }\n        this.setState({values}, this.validateInputs);\n    }\n    validateInputs = (callback) => {\n        let hasError = false;\n        let errors = Object.assign({}, this.state.errors);\n        errors.emails = emailValidation(this.state.values.emails);\n        errors.title = inputValidation(this.state.values.title);\n        if(errors.emails || errors.title) {hasError = true}\n        for (let i = 0; i < this.state.inputCount; i++){\n            errors.options[i] = inputValidation(this.state.values.options[i]);\n            if(errors.options[i]){hasError = true}\n        }\n        this.setState({errors, hasError}, callback);\n    }\n    submitAction = () => {\n        if(!this.state.hasError){\n            this.setState({modalStatus: 'open'})\n        }\n    }\n    handleSubmit = event => {\n        event.preventDefault();\n        this.setState({submitted: true}, this.validateInputs(this.submitAction));\n    }\n    handleSuccess = pollID => {\n        this.setState({pollID, modalStatus: 'closed'})\n    }\n    addInput = () => {\n        this.setState({inputCount: this.state.inputCount+1});\n        this.submitBtn.scrollIntoView({ behavior: \"smooth\" });\n    }\n    removeInput = index => {\n        let values = Object.assign({}, this.state.values);\n        values.options[index-1] = '';\n        let len = values.options.length;\n        for(let i = index - 1; i < len - 1; i++){\n            values.options[i] = values.options[i+1]\n        }\n        values.options[len] = '';\n        this.setState({values, inputCount: this.state.inputCount - 1});\n    }\n    isDisabled = () => {\n        return this.state.inputCount >= this.state.values.options.length\n    }\n    renderInputs = () => {\n        let inputArr=[];\n        for(let i = 0; i < this.state.inputCount; i++){\n            inputArr.push(<FormInput \n                            key={`option${i}`}\n                            type='text' \n                            name={`option$${i}`} \n                            label={`Enter voting option #${i+1}`}\n                            index={i+1}\n                            value={this.state.values.options[i]}\n                            error={this.state.errors.options[i]}\n                            submitted={this.state.submitted}\n                            handleChange={this.handleChange}\n                            removeInput={this.removeInput}\n                            />)\n        }\n        return inputArr;\n    }\n    render(){\n        return(\n            <Fragment>\n                {this.state.modalStatus === 'open' && <PollConfirmationModal \n                                                        modalStatus={'open'} \n                                                        values={this.state.values} \n                                                        handleModalClose={() => this.setState({modalStatus: 'closed'})}\n                                                        handleSuccess={this.handleSuccess}\n                                                        />}\n                {this.state.pollID && <PollCreatedModal pollID={this.state.pollID} />}\n                <Navbar />\n                <div className='main-container'>\n                    <h1 className='text-center'>Create a New RCV Poll</h1>\n                    <div className='p-10 text-center' style={{margin: 'auto', maxWidth: 600}}>*Limit 10 voting options per poll. Please separate each vote recipient's email address with a comma.</div>\n                    <div className='form-container'>\n                        <form onSubmit={this.handleSubmit}>\n                            <FormInput \n                                type='text' \n                                name='emails' \n                                label='Enter voter emails' \n                                value={this.state.values.emails} \n                                error={this.state.errors.emails}\n                                submitted={this.state.submitted}\n                                handleChange={this.handleChange} \n                            />\n                            <FormInput \n                                type='text' \n                                name='title' \n                                label='Enter a poll title' \n                                value={this.state.values.title}\n                                error={this.state.errors.title}\n                                submitted={this.state.submitted}\n                                handleChange={this.handleChange} \n                            />\n                            {this.renderInputs()}\n                            <div style={{paddingBottom: 20}}>\n                                <button \n                                ref={el => this.submitBtn = el}\n                                className={`float-right btn btn-orange`}\n                                >SUBMIT POLL</button>\n                            </div>\n                        </form>\n                        <button \n                            style={{marginTop: -20}}\n                            className={`float-left btn btn-white${this.isDisabled() ? ' disabled': ''}`}\n                            disabled={this.isDisabled()}\n                            onClick={() => this.addInput()}><Icon icon='plus' width='10px' color='#333'/> <span>Add Option</span></button>\n                    </div>\n                </div>\n            </Fragment>\n        )\n    }\n}\n\nexport default PollNew;","import React, {Component} from 'react';\nimport Draggable from 'react-draggable';\nimport _ from 'lodash';\n\nconst CLOSE_ENOUGH = 80;\n\nclass CustomDraggable extends Component{\n    state = {\n        initialPosition: null,\n        element: null\n    }\n    componentWillMount(){\n        window.addEventListener('resize', _.debounce(this.handleResize, 100));\n    }\n    componentWillUnmount(){\n        window.removeEventListener('resize', _.debounce(this.handleResize, 100));\n    }\n    handleResize = () => {\n        let {x, y} = this.state.element.getBoundingClientRect();\n        this.setState({initialPosition: {x,y}});\n    }\n    handleRef = element => {\n        if(element && !this.state.element){\n            let {x, y} = element.getBoundingClientRect();\n            this.setState({element, initialPosition: {x,y}});\n        }\n    }\n    handleStop = (e, ui) => {\n        let closeEnough = false;\n        let {x, y} = ui.node.getBoundingClientRect();\n        let ph = this.props.placeholders;\n        for(let i = 0; i < ph.length; i++){\n            let dims = ph[i].getBoundingClientRect();\n            let x2 = dims.x;\n            let y2 = dims.y;\n            let distance = Math.sqrt((x2-x)*(x2-x) + (y2-y)*(y2-y));\n            if(distance < CLOSE_ENOUGH){\n                let init = this.state.initialPosition;\n                this.props.setPosition({selection: i, position: {x: x2- init.x, y: y2 - init.y}}, this.props.index);\n                closeEnough = true;\n                break;\n            }\n        }\n        if(!closeEnough){\n            this.props.setPosition({selection: null, position: {x: 0, y: 0}}, this.props.index);\n        }\n    }\n    render(){\n        const {option, index, data: {position}} = this.props;\n        return(\n            <div ref={el => this.handleRef(el)} className='draggable-placeholder'>\n                <span>Option #{index+1}</span>\n                <Draggable\n                    onStop={this.handleStop}\n                    position={position}\n                >\n                    <div className='draggable-option'>{option}</div>\n                </Draggable>\n            </div>\n        )\n    }\n}\n\nexport default CustomDraggable;","import React, {Component} from 'react';\nimport axios from 'axios';\nimport LoadingIcon from './LoadingIcon';\nimport {ordinals} from '../utils';\n\nclass PollSelectionModal extends Component {\n    state = {\n        submitting: false,\n        error: false\n    }\n    handleSubmit = () => {\n        this.setState({submitting: true})\n        axios.post(`/api/poll/${this.props.pollID}/voter/${this.props.voterID}`, this.props.selections)\n        .then( res =>{\n            if(res.status===202){\n                this.props.handleSuccess();\n            }\n            else{\n                this.setState({error: true, submitting: false});\n            }\n        })\n        .catch( () => {\n            this.setState({error: true, submitting: false});\n        })\n    }\n    renderSelections = () => {\n       return this.props.selections.map( (selection, index) => {\n            return(<div key={`${selection}${index}`}>\n                        <div><strong>{ordinals[index]} Choice: </strong>{selection}</div>\n                    </div>\n                )\n        })\n    }\n    render(){\n        const {modalStatus, title, handleModalClose} = this.props;\n        return(\n            <div className={`text-center modal-backdrop ${modalStatus}`}>\n                <div className='modal-container p-10'>\n                    <div style={{fontSize: 28, marginBottom: 20}}>{title}</div>\n                    <p style={{marginBottom: 20, fontSize: 16}}>Please confirm your poll entries are correct before submitting</p>\n                    <div style={{borderBottom: '1px solid #ddd', borderTop: '1px solid #ddd', padding: '10px 10px 20px 10px', margin: '20px auto'}}>\n                        <div style={{color: '#444', letterSpacing: 3, marginBottom: 20, fontSize: 22, textDecoration: 'underline'}}>YOUR SELECTIONS</div>\n                        <div>\n                            {this.renderSelections()}\n                        </div>\n                    </div>\n                    {this.state.submitting ? <div className='text-right p-5'><LoadingIcon /></div> : (<div className='text-right'>\n                        <button onClick={() => handleModalClose()} className='btn btn-white m-10'>Cancel</button>\n                        <button onClick={() => this.handleSubmit()} className='btn btn-orange btn-orange-2 m-10'>Looks good, fire away!</button>\n                    </div>)}\n                    {this.state.error && <div style={{color: '#d24425'}} className='text-right p-10'>An error occurred. Please try again later.</div>}\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default PollSelectionModal;","import React from 'react';\n\nconst SuccessModal = ({pollID}) => {\n    return(\n        <div>\n            <div className={`text-center modal-backdrop open`}>\n                <div className='modal-container p-10'>\n                    <div style={{color: '#2c74c1', fontSize: 49, marginBottom: 15}}>Success!</div>\n                    <div style={{borderBottom: '1px solid #ddd', borderTop: '1px solid #ddd', padding: '20px 10px', margin: '20px auto'}}>\n                        <div style={{margin: 'auto', maxWidth: 400}}>\n                            We have successfully received your voting results. Now what would you like to do next?\n                        </div>\n                    </div>\n                    <div className='text-right'>\n                        <a href='/' className='btn btn-white m-10'>Go Home</a>\n                        <a href={`/poll/${pollID}/results`} className='btn btn-orange btn-orange-2 m-10'>View Results</a>\n                    </div>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default SuccessModal;","import React, {Component, Fragment} from 'react';\nimport CustomDraggable from './CustomDraggable';\nimport PollSelectionModal from './PollSelectionModal';\nimport SuccessModal from './SuccessModal';\nimport {ordinals} from '../utils';\n\n//http://localhost:3000/poll/5c02d6eb82bf802145f7e9b6/voter/5c02d6eb82bf802145f7e9b7\n\nclass PollSelections extends Component{\n    state = {\n        draggables: [],\n        selections: [],\n        modalStatus: 'closed',\n        success: false\n    }\n    componentWillMount(){\n        this.placeholders = [];\n        let draggables = [];\n        for(let i = 0; i < this.props.options.length; i++){\n            draggables.push({selection: null, position: {x: 0, y: 0}});\n        }\n        this.setState({draggables})\n    }\n    handleSuccess = () => {\n        this.setState({success: true, modalStatus: 'closed'})\n    }\n    setPosition = (data, index) => {\n        let newSelection = true;\n        let draggables = [...this.state.draggables];\n        for(let i = 0; i < draggables.length; i++){\n            if(draggables[i].selection === data.selection && i !== index){\n                newSelection = false;\n            }\n        }\n        if(newSelection || (!data.selection && draggables[index].selection !== null)){\n            draggables[index] = data;\n            this.setState({draggables});\n        }\n    }\n    renderOptions = () => {\n        return this.props.options.map( (option, index) =>{\n            return (\n                    <CustomDraggable \n                        key={`opt-${index}`}\n                        option={option} \n                        placeholders={this.placeholders} \n                        index={index} \n                        data={this.state.draggables[index]} \n                        setPosition={this.setPosition}\n                    />\n            )\n        })\n    }\n    renderPlaceholders = () => {\n        return this.props.options.map( (opt, index) =>{\n            return (<div ref={el => this.placeholders[index] = el} key={`placeholder-${index}`} className='draggable-selection'>\n                        <span>Drag your {ordinals[index]} choice here</span>\n                    </div>)\n        })\n    }\n    resetDraggables = () => {\n        let len = this.state.draggables.length;\n        let draggables = [];\n        for(let i = 0; i < len; i++){\n            draggables.push({selection: null, position: {x: 0, y: 0}})\n        }\n        this.setState({draggables});\n    }\n    handleSubmit = () =>{\n        let draggables = this.state.draggables;\n        let selections = [...draggables].map( d => null);\n        let canSubmit = true;\n        for (let i = 0; i < draggables.length; i++){\n            if(draggables[i].selection === null){\n                canSubmit = false;\n                break;\n            }\n            else{\n                selections[draggables[i].selection] = this.props.options[i]\n            }\n        }\n        if(canSubmit){\n            this.setState({modalStatus: 'open', selections})\n        }\n        else{\n            window.alert('You must rank all options before submitting.')\n        }\n    }\n    render(){\n        return(\n            <Fragment>\n                <div style={{maxWidth: 900, margin: 'auto', padding: 10}}>\n                    <h1 className='text-center'>{this.props.title}</h1>\n                    <div className='p-10 text-center'>Please rank the provided options in order \n                    from most preferable to least preferable</div>\n                    <div className='border-holder'></div>\n                    <div className='row'>\n                        <div className='col-2-always p-10'>\n                            <div className='text-center font-18'>OPTIONS</div>\n                            {this.renderOptions()}\n                        </div>\n                        <div className='col-2-always p-10'>\n                            <div className='text-center font-18'>SELECTIONS</div>\n                            {this.renderPlaceholders()}\n                        </div>\n                    </div>\n                    <div className='border-holder'></div>\n                    <div className='text-right'>\n                        <button onClick={() => this.resetDraggables()} className='btn btn-black m-10'>RESET</button>\n                        <button onClick={() => this.handleSubmit()} style={{width: 130, fontSize: 22}} className='btn btn-orange m-10 box-shadow'>SUBMIT</button>\n                    </div>\n                </div>\n                <PollSelectionModal \n                handleModalClose={() => this.setState({modalStatus: 'closed'})}\n                handleSuccess={this.handleSuccess}\n                modalStatus={this.state.modalStatus}\n                title={this.props.title}\n                selections={this.state.selections}\n                pollID={this.props.pollID}\n                voterID={this.props.voterID}\n                />\n                {this.state.success && <SuccessModal pollID={this.props.pollID}/>}\n            </Fragment>\n        )\n    }\n}\n\nexport default PollSelections;","import React, {Component, Fragment} from 'react';\nimport axios from 'axios';\nimport Navbar from './Navbar';\nimport LoadingIcon from './LoadingIcon';\nimport PollSelections from './PollSelections';\n\nclass PollSelectionParent extends Component{\n    state = {\n        poll: null,\n        draggables: null,\n        error: false\n    }\n    componentWillMount(){\n        document.title = 'Make Your Poll Selections | InstantRCV';\n        this.pollID = this.props.match.params.pollID;\n        this.voterID = this.props.match.params.voterID;\n        axios.get(`/api/poll/${this.pollID}/voter/${this.voterID}`)\n        .then( res => {\n            if(res.data){\n                this.setState({poll: res.data});\n            }\n            else{\n                this.setState({error: true})\n            }\n        })\n        .catch(() => {\n            this.setState({error: true})\n        })\n    }\n    renderContent(){\n        if(this.state.error){\n            return (\n                <div className='p-10 text-center font-18'>\n                    This poll no longer exists or could not be loaded.\n                </div>\n            )\n        }\n        else if(this.state.poll){\n            return <PollSelections \n                    pollID={this.pollID}\n                    voterID={this.voterID}\n                    options={this.state.poll.options} \n                    title={this.state.poll.title} />\n        }\n        return (\n            <div className='p-10 text-center'>\n                <LoadingIcon classOption='loading-2' />\n            </div>\n        )\n    }\n    render(){\n        return(\n            <Fragment>\n                <Navbar />\n                <div className='main-container'>\n                    {this.renderContent()}\n                </div>\n            </Fragment>\n        )\n    }\n}\n\nexport default PollSelectionParent;","import React, {Component, Fragment} from 'react';\nimport Navbar from './Navbar';\nimport LoadingIcon from './LoadingIcon'\nimport axios from 'axios';\nimport {ordinals} from '../utils';\n\nclass PollResults extends Component{\n    state = {\n        poll: null,\n        error: false\n    }\n    componentWillMount(){\n        document.title = \"View Poll Results | InstantRCV\"\n        this.pollID = this.props.match.params.pollID;\n        axios.get(`/api/results/${this.pollID}`)\n        .then( res => {\n            if(res.status === 200){\n                this.setState({poll: res.data});\n            }\n            else{\n                this.setState({error:true});\n            }\n        })\n        .catch( () => {\n            this.setState({error: true})\n        })\n    }\n    renderVoters(){\n        if(this.state.poll){\n            let voters = this.state.poll.voters.filter( v => v.voted);\n            if(this.state.poll.allVotesReceived){\n                return(\n                    <Fragment>\n                        <div style={{margin: '20px auto', borderTop: '1px solid #fff', textAlign: 'left', fontSize: 24}}>Voter Selections:</div>\n                        <div className='row'>\n                            {voters.map( (v,i) => {\n                                return (<div key={`voter${i}`} className='col-3 p-10'>\n                                            <div className='voter box-shadow'>\n                                                <div className='email'>{v.email}</div>\n                                                <table className='table'>\n                                                    <tbody>\n                                                        {v.selections.map( (sel, i) => {\n                                                            return (<tr key={`row-${i}`}>\n                                                                        <td>{ordinals[i]} Choice:</td>\n                                                                        <td>{sel}</td>\n                                                                    </tr>\n                                                            )\n                                                        })}\n                                                    </tbody>\n                                                </table>\n                                            </div>\n                                        </div>)\n                            })}\n                        </div>\n                    </Fragment>\n                )\n            }\n            if(voters.length > 0){\n                return(\n                    <Fragment>\n                        <div style={{margin: '20px auto', borderTop: '1px solid #fff', textAlign: 'left', fontSize: 24}}>Voter Selections:</div>\n                        <div className='row'>\n                            {voters.map( (v,i) => {\n                                return (<div key={`voter${i}`} className='col-3 p-10'>\n                                            <div className='voter box-shadow'>\n                                                <div className='email'>{v.email}</div>\n                                                <div title='Voter selections are hidden until all votes are received' style={{cursor: 'help', marginTop: 10, color: '#777', fontSize: 16}}>(RESULTS HIDDEN)</div>\n                                            </div>\n                                        </div>)\n                            })}\n                        </div>\n                    </Fragment>\n                )\n            }\n        }\n    }\n    renderPendingVoters(){\n        if(this.state.poll){\n            let pendingVoters = this.state.poll.voters.filter( v => !v.voted);\n            if(pendingVoters.length > 0){\n                return(\n                    <Fragment>\n                        <div style={{margin: '40px auto 20px', borderTop: '1px solid #fff', textAlign: 'left', fontSize: 24}}>Pending Voters:</div>\n                        <div className='row'>\n                            {pendingVoters.map( (pv, i) => {\n                                return (<div key={`pending-${i}`}className='col-3 p-10'><div className='pending-voter box-shadow'>{pv.email}</div></div>)\n                            })}\n                        </div>\n                    </Fragment>\n                )\n            }\n        }\n    }\n    renderWinner(){\n        if(this.state.poll.winner){\n            return (<Fragment>\n                        <div style={{letterSpacing: 5, fontSize: 24, borderBottom: '1px solid #ddd', width: '80%', margin: '10px auto'}}>WINNER</div>\n                        <div style={{paddingBottom: 10, color: '#ffc107', letterSpacing: 5, fontSize: 44}}>{this.state.poll.winner}</div>\n                    </Fragment>\n                    )\n        }\n        return <div style={{fontSize: 20, padding: 10}}>No winner has been determined yet...</div>\n    }\n    renderContent() {\n        if(this.state.error){\n            return (\n                <div className='p-10 text-center font-18'>\n                    This poll no longer exists or could not be loaded.\n                </div>\n            )\n        }\n        else if(this.state.poll){\n            return (<div className='text-center'>\n                        <h1 style={{borderBottom: '1px solid #f9f9f9', maxWidth: '100%'}}>VIEW RESULTS</h1>\n                        <div style={{margin: '40px auto 20px', fontSize: 24, letterSpacing: 4}}>{this.state.poll.title}</div>\n                        <div className='winner-section'>\n                            {this.renderWinner()}\n                        </div>\n                        <div className='progress box-shadow'>\n                            <span>{((this.state.poll.votesReceived/this.state.poll.totalVoters)*100).toFixed(0)}% votes received</span>\n                            <div className='progress-bar-container' style={{width: `${(this.state.poll.votesReceived/this.state.poll.totalVoters)*100}%`}}>\n                                <div className='progress-bar'></div>\n                            </div>\n                        </div>\n                        {this.renderVoters()}\n                        {this.renderPendingVoters()}\n                    </div>\n                )\n        }\n        return (\n            <div className='p-10 text-center'>\n                <LoadingIcon classOption='loading-2' />\n            </div>\n        )\n    }\n    render(){\n        return(\n            <Fragment>\n                <Navbar/>\n                <div className='main-container'>\n                    <div style={{maxWidth: 1000, margin: 'auto', padding: 10}}>\n                        {this.renderContent()}\n                    </div>\n                </div>\n            </Fragment>\n        )\n    }\n}\n\nexport default PollResults;","import React, { Component } from 'react';\nimport {BrowserRouter, Route, Switch} from 'react-router-dom';\nimport Landing from './Landing';\nimport PollNew from './PollNew';\nimport PollSelectionParent from './PollSelectionParent';\nimport PollResults from './PollResults';\n\nclass App extends Component {\n  render() {\n    return (\n      <BrowserRouter>\n        <Switch>\n          <Route exact path='/' component={Landing} />\n          <Route exact path='/new-poll' component={PollNew} />\n          <Route exact path='/poll/:pollID/voter/:voterID' component={PollSelectionParent} />\n          <Route exact path='/poll/:pollID/results' component={PollResults} />\n        </Switch>\n      </BrowserRouter>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './stylesheets/index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}